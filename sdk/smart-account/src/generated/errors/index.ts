/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * AccountNotEmpty: 'Account is not empty'
 *
 * @category Errors
 * @category generated
 */
export class AccountNotEmptyError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'AccountNotEmpty'
  constructor() {
    super('Account is not empty')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AccountNotEmptyError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new AccountNotEmptyError())
createErrorFromNameLookup.set(
  'AccountNotEmpty',
  () => new AccountNotEmptyError()
)

/**
 * DuplicateSigner: 'Found multiple signers with the same pubkey'
 *
 * @category Errors
 * @category generated
 */
export class DuplicateSignerError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'DuplicateSigner'
  constructor() {
    super('Found multiple signers with the same pubkey')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, DuplicateSignerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new DuplicateSignerError())
createErrorFromNameLookup.set(
  'DuplicateSigner',
  () => new DuplicateSignerError()
)

/**
 * EmptySigners: 'Signers array is empty'
 *
 * @category Errors
 * @category generated
 */
export class EmptySignersError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'EmptySigners'
  constructor() {
    super('Signers array is empty')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, EmptySignersError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new EmptySignersError())
createErrorFromNameLookup.set('EmptySigners', () => new EmptySignersError())

/**
 * TooManySigners: 'Too many signers, can be up to 65535'
 *
 * @category Errors
 * @category generated
 */
export class TooManySignersError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'TooManySigners'
  constructor() {
    super('Too many signers, can be up to 65535')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TooManySignersError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new TooManySignersError())
createErrorFromNameLookup.set('TooManySigners', () => new TooManySignersError())

/**
 * InvalidThreshold: 'Invalid threshold, must be between 1 and number of signers with vote permissions'
 *
 * @category Errors
 * @category generated
 */
export class InvalidThresholdError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'InvalidThreshold'
  constructor() {
    super(
      'Invalid threshold, must be between 1 and number of signers with vote permissions'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidThresholdError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new InvalidThresholdError())
createErrorFromNameLookup.set(
  'InvalidThreshold',
  () => new InvalidThresholdError()
)

/**
 * Unauthorized: 'Attempted to perform an unauthorized action'
 *
 * @category Errors
 * @category generated
 */
export class UnauthorizedError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'Unauthorized'
  constructor() {
    super('Attempted to perform an unauthorized action')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnauthorizedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new UnauthorizedError())
createErrorFromNameLookup.set('Unauthorized', () => new UnauthorizedError())

/**
 * NotASigner: 'Provided pubkey is not a signer of the smart account'
 *
 * @category Errors
 * @category generated
 */
export class NotASignerError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'NotASigner'
  constructor() {
    super('Provided pubkey is not a signer of the smart account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotASignerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new NotASignerError())
createErrorFromNameLookup.set('NotASigner', () => new NotASignerError())

/**
 * InvalidTransactionMessage: 'TransactionMessage is malformed.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTransactionMessageError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'InvalidTransactionMessage'
  constructor() {
    super('TransactionMessage is malformed.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTransactionMessageError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1777,
  () => new InvalidTransactionMessageError()
)
createErrorFromNameLookup.set(
  'InvalidTransactionMessage',
  () => new InvalidTransactionMessageError()
)

/**
 * StaleProposal: 'Proposal is stale'
 *
 * @category Errors
 * @category generated
 */
export class StaleProposalError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'StaleProposal'
  constructor() {
    super('Proposal is stale')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, StaleProposalError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new StaleProposalError())
createErrorFromNameLookup.set('StaleProposal', () => new StaleProposalError())

/**
 * InvalidProposalStatus: 'Invalid proposal status'
 *
 * @category Errors
 * @category generated
 */
export class InvalidProposalStatusError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'InvalidProposalStatus'
  constructor() {
    super('Invalid proposal status')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidProposalStatusError)
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new InvalidProposalStatusError())
createErrorFromNameLookup.set(
  'InvalidProposalStatus',
  () => new InvalidProposalStatusError()
)

/**
 * InvalidTransactionIndex: 'Invalid transaction index'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTransactionIndexError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'InvalidTransactionIndex'
  constructor() {
    super('Invalid transaction index')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTransactionIndexError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new InvalidTransactionIndexError())
createErrorFromNameLookup.set(
  'InvalidTransactionIndex',
  () => new InvalidTransactionIndexError()
)

/**
 * AlreadyApproved: 'Signer already approved the transaction'
 *
 * @category Errors
 * @category generated
 */
export class AlreadyApprovedError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'AlreadyApproved'
  constructor() {
    super('Signer already approved the transaction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AlreadyApprovedError)
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new AlreadyApprovedError())
createErrorFromNameLookup.set(
  'AlreadyApproved',
  () => new AlreadyApprovedError()
)

/**
 * AlreadyRejected: 'Signer already rejected the transaction'
 *
 * @category Errors
 * @category generated
 */
export class AlreadyRejectedError extends Error {
  readonly code: number = 0x177c
  readonly name: string = 'AlreadyRejected'
  constructor() {
    super('Signer already rejected the transaction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AlreadyRejectedError)
    }
  }
}

createErrorFromCodeLookup.set(0x177c, () => new AlreadyRejectedError())
createErrorFromNameLookup.set(
  'AlreadyRejected',
  () => new AlreadyRejectedError()
)

/**
 * AlreadyCancelled: 'Signer already cancelled the transaction'
 *
 * @category Errors
 * @category generated
 */
export class AlreadyCancelledError extends Error {
  readonly code: number = 0x177d
  readonly name: string = 'AlreadyCancelled'
  constructor() {
    super('Signer already cancelled the transaction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AlreadyCancelledError)
    }
  }
}

createErrorFromCodeLookup.set(0x177d, () => new AlreadyCancelledError())
createErrorFromNameLookup.set(
  'AlreadyCancelled',
  () => new AlreadyCancelledError()
)

/**
 * InvalidNumberOfAccounts: 'Wrong number of accounts provided'
 *
 * @category Errors
 * @category generated
 */
export class InvalidNumberOfAccountsError extends Error {
  readonly code: number = 0x177e
  readonly name: string = 'InvalidNumberOfAccounts'
  constructor() {
    super('Wrong number of accounts provided')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidNumberOfAccountsError)
    }
  }
}

createErrorFromCodeLookup.set(0x177e, () => new InvalidNumberOfAccountsError())
createErrorFromNameLookup.set(
  'InvalidNumberOfAccounts',
  () => new InvalidNumberOfAccountsError()
)

/**
 * InvalidAccount: 'Invalid account provided'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAccountError extends Error {
  readonly code: number = 0x177f
  readonly name: string = 'InvalidAccount'
  constructor() {
    super('Invalid account provided')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x177f, () => new InvalidAccountError())
createErrorFromNameLookup.set('InvalidAccount', () => new InvalidAccountError())

/**
 * RemoveLastSigner: 'Cannot remove last signer'
 *
 * @category Errors
 * @category generated
 */
export class RemoveLastSignerError extends Error {
  readonly code: number = 0x1780
  readonly name: string = 'RemoveLastSigner'
  constructor() {
    super('Cannot remove last signer')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RemoveLastSignerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1780, () => new RemoveLastSignerError())
createErrorFromNameLookup.set(
  'RemoveLastSigner',
  () => new RemoveLastSignerError()
)

/**
 * NoVoters: 'Signers don't include any voters'
 *
 * @category Errors
 * @category generated
 */
export class NoVotersError extends Error {
  readonly code: number = 0x1781
  readonly name: string = 'NoVoters'
  constructor() {
    super("Signers don't include any voters")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoVotersError)
    }
  }
}

createErrorFromCodeLookup.set(0x1781, () => new NoVotersError())
createErrorFromNameLookup.set('NoVoters', () => new NoVotersError())

/**
 * NoProposers: 'Signers don't include any proposers'
 *
 * @category Errors
 * @category generated
 */
export class NoProposersError extends Error {
  readonly code: number = 0x1782
  readonly name: string = 'NoProposers'
  constructor() {
    super("Signers don't include any proposers")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoProposersError)
    }
  }
}

createErrorFromCodeLookup.set(0x1782, () => new NoProposersError())
createErrorFromNameLookup.set('NoProposers', () => new NoProposersError())

/**
 * NoExecutors: 'Signers don't include any executors'
 *
 * @category Errors
 * @category generated
 */
export class NoExecutorsError extends Error {
  readonly code: number = 0x1783
  readonly name: string = 'NoExecutors'
  constructor() {
    super("Signers don't include any executors")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoExecutorsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1783, () => new NoExecutorsError())
createErrorFromNameLookup.set('NoExecutors', () => new NoExecutorsError())

/**
 * InvalidStaleTransactionIndex: '`stale_transaction_index` must be <= `transaction_index`'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStaleTransactionIndexError extends Error {
  readonly code: number = 0x1784
  readonly name: string = 'InvalidStaleTransactionIndex'
  constructor() {
    super('`stale_transaction_index` must be <= `transaction_index`')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStaleTransactionIndexError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1784,
  () => new InvalidStaleTransactionIndexError()
)
createErrorFromNameLookup.set(
  'InvalidStaleTransactionIndex',
  () => new InvalidStaleTransactionIndexError()
)

/**
 * NotSupportedForControlled: 'Instruction not supported for controlled smart account'
 *
 * @category Errors
 * @category generated
 */
export class NotSupportedForControlledError extends Error {
  readonly code: number = 0x1785
  readonly name: string = 'NotSupportedForControlled'
  constructor() {
    super('Instruction not supported for controlled smart account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotSupportedForControlledError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1785,
  () => new NotSupportedForControlledError()
)
createErrorFromNameLookup.set(
  'NotSupportedForControlled',
  () => new NotSupportedForControlledError()
)

/**
 * TimeLockNotReleased: 'Proposal time lock has not been released'
 *
 * @category Errors
 * @category generated
 */
export class TimeLockNotReleasedError extends Error {
  readonly code: number = 0x1786
  readonly name: string = 'TimeLockNotReleased'
  constructor() {
    super('Proposal time lock has not been released')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TimeLockNotReleasedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1786, () => new TimeLockNotReleasedError())
createErrorFromNameLookup.set(
  'TimeLockNotReleased',
  () => new TimeLockNotReleasedError()
)

/**
 * NoActions: 'Config transaction must have at least one action'
 *
 * @category Errors
 * @category generated
 */
export class NoActionsError extends Error {
  readonly code: number = 0x1787
  readonly name: string = 'NoActions'
  constructor() {
    super('Config transaction must have at least one action')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoActionsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1787, () => new NoActionsError())
createErrorFromNameLookup.set('NoActions', () => new NoActionsError())

/**
 * MissingAccount: 'Missing account'
 *
 * @category Errors
 * @category generated
 */
export class MissingAccountError extends Error {
  readonly code: number = 0x1788
  readonly name: string = 'MissingAccount'
  constructor() {
    super('Missing account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MissingAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1788, () => new MissingAccountError())
createErrorFromNameLookup.set('MissingAccount', () => new MissingAccountError())

/**
 * InvalidMint: 'Invalid mint'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintError extends Error {
  readonly code: number = 0x1789
  readonly name: string = 'InvalidMint'
  constructor() {
    super('Invalid mint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMintError)
    }
  }
}

createErrorFromCodeLookup.set(0x1789, () => new InvalidMintError())
createErrorFromNameLookup.set('InvalidMint', () => new InvalidMintError())

/**
 * InvalidDestination: 'Invalid destination'
 *
 * @category Errors
 * @category generated
 */
export class InvalidDestinationError extends Error {
  readonly code: number = 0x178a
  readonly name: string = 'InvalidDestination'
  constructor() {
    super('Invalid destination')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidDestinationError)
    }
  }
}

createErrorFromCodeLookup.set(0x178a, () => new InvalidDestinationError())
createErrorFromNameLookup.set(
  'InvalidDestination',
  () => new InvalidDestinationError()
)

/**
 * SpendingLimitExceeded: 'Spending limit exceeded'
 *
 * @category Errors
 * @category generated
 */
export class SpendingLimitExceededError extends Error {
  readonly code: number = 0x178b
  readonly name: string = 'SpendingLimitExceeded'
  constructor() {
    super('Spending limit exceeded')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SpendingLimitExceededError)
    }
  }
}

createErrorFromCodeLookup.set(0x178b, () => new SpendingLimitExceededError())
createErrorFromNameLookup.set(
  'SpendingLimitExceeded',
  () => new SpendingLimitExceededError()
)

/**
 * DecimalsMismatch: 'Decimals don't match the mint'
 *
 * @category Errors
 * @category generated
 */
export class DecimalsMismatchError extends Error {
  readonly code: number = 0x178c
  readonly name: string = 'DecimalsMismatch'
  constructor() {
    super("Decimals don't match the mint")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, DecimalsMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x178c, () => new DecimalsMismatchError())
createErrorFromNameLookup.set(
  'DecimalsMismatch',
  () => new DecimalsMismatchError()
)

/**
 * UnknownPermission: 'Signer has unknown permission'
 *
 * @category Errors
 * @category generated
 */
export class UnknownPermissionError extends Error {
  readonly code: number = 0x178d
  readonly name: string = 'UnknownPermission'
  constructor() {
    super('Signer has unknown permission')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnknownPermissionError)
    }
  }
}

createErrorFromCodeLookup.set(0x178d, () => new UnknownPermissionError())
createErrorFromNameLookup.set(
  'UnknownPermission',
  () => new UnknownPermissionError()
)

/**
 * ProtectedAccount: 'Account is protected, it cannot be passed into a CPI as writable'
 *
 * @category Errors
 * @category generated
 */
export class ProtectedAccountError extends Error {
  readonly code: number = 0x178e
  readonly name: string = 'ProtectedAccount'
  constructor() {
    super('Account is protected, it cannot be passed into a CPI as writable')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProtectedAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x178e, () => new ProtectedAccountError())
createErrorFromNameLookup.set(
  'ProtectedAccount',
  () => new ProtectedAccountError()
)

/**
 * TimeLockExceedsMaxAllowed: 'Time lock exceeds the maximum allowed (90 days)'
 *
 * @category Errors
 * @category generated
 */
export class TimeLockExceedsMaxAllowedError extends Error {
  readonly code: number = 0x178f
  readonly name: string = 'TimeLockExceedsMaxAllowed'
  constructor() {
    super('Time lock exceeds the maximum allowed (90 days)')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TimeLockExceedsMaxAllowedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x178f,
  () => new TimeLockExceedsMaxAllowedError()
)
createErrorFromNameLookup.set(
  'TimeLockExceedsMaxAllowed',
  () => new TimeLockExceedsMaxAllowedError()
)

/**
 * IllegalAccountOwner: 'Account is not owned by Smart Account program'
 *
 * @category Errors
 * @category generated
 */
export class IllegalAccountOwnerError extends Error {
  readonly code: number = 0x1790
  readonly name: string = 'IllegalAccountOwner'
  constructor() {
    super('Account is not owned by Smart Account program')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IllegalAccountOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1790, () => new IllegalAccountOwnerError())
createErrorFromNameLookup.set(
  'IllegalAccountOwner',
  () => new IllegalAccountOwnerError()
)

/**
 * RentReclamationDisabled: 'Rent reclamation is disabled for this smart account'
 *
 * @category Errors
 * @category generated
 */
export class RentReclamationDisabledError extends Error {
  readonly code: number = 0x1791
  readonly name: string = 'RentReclamationDisabled'
  constructor() {
    super('Rent reclamation is disabled for this smart account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RentReclamationDisabledError)
    }
  }
}

createErrorFromCodeLookup.set(0x1791, () => new RentReclamationDisabledError())
createErrorFromNameLookup.set(
  'RentReclamationDisabled',
  () => new RentReclamationDisabledError()
)

/**
 * InvalidRentCollector: 'Invalid rent collector address'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRentCollectorError extends Error {
  readonly code: number = 0x1792
  readonly name: string = 'InvalidRentCollector'
  constructor() {
    super('Invalid rent collector address')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRentCollectorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1792, () => new InvalidRentCollectorError())
createErrorFromNameLookup.set(
  'InvalidRentCollector',
  () => new InvalidRentCollectorError()
)

/**
 * ProposalForAnotherSmartAccount: 'Proposal is for another smart account'
 *
 * @category Errors
 * @category generated
 */
export class ProposalForAnotherSmartAccountError extends Error {
  readonly code: number = 0x1793
  readonly name: string = 'ProposalForAnotherSmartAccount'
  constructor() {
    super('Proposal is for another smart account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProposalForAnotherSmartAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1793,
  () => new ProposalForAnotherSmartAccountError()
)
createErrorFromNameLookup.set(
  'ProposalForAnotherSmartAccount',
  () => new ProposalForAnotherSmartAccountError()
)

/**
 * TransactionForAnotherSmartAccount: 'Transaction is for another smart account'
 *
 * @category Errors
 * @category generated
 */
export class TransactionForAnotherSmartAccountError extends Error {
  readonly code: number = 0x1794
  readonly name: string = 'TransactionForAnotherSmartAccount'
  constructor() {
    super('Transaction is for another smart account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TransactionForAnotherSmartAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1794,
  () => new TransactionForAnotherSmartAccountError()
)
createErrorFromNameLookup.set(
  'TransactionForAnotherSmartAccount',
  () => new TransactionForAnotherSmartAccountError()
)

/**
 * TransactionNotMatchingProposal: 'Transaction doesn't match proposal'
 *
 * @category Errors
 * @category generated
 */
export class TransactionNotMatchingProposalError extends Error {
  readonly code: number = 0x1795
  readonly name: string = 'TransactionNotMatchingProposal'
  constructor() {
    super("Transaction doesn't match proposal")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TransactionNotMatchingProposalError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1795,
  () => new TransactionNotMatchingProposalError()
)
createErrorFromNameLookup.set(
  'TransactionNotMatchingProposal',
  () => new TransactionNotMatchingProposalError()
)

/**
 * TransactionNotLastInBatch: 'Transaction is not last in batch'
 *
 * @category Errors
 * @category generated
 */
export class TransactionNotLastInBatchError extends Error {
  readonly code: number = 0x1796
  readonly name: string = 'TransactionNotLastInBatch'
  constructor() {
    super('Transaction is not last in batch')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TransactionNotLastInBatchError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1796,
  () => new TransactionNotLastInBatchError()
)
createErrorFromNameLookup.set(
  'TransactionNotLastInBatch',
  () => new TransactionNotLastInBatchError()
)

/**
 * BatchNotEmpty: 'Batch is not empty'
 *
 * @category Errors
 * @category generated
 */
export class BatchNotEmptyError extends Error {
  readonly code: number = 0x1797
  readonly name: string = 'BatchNotEmpty'
  constructor() {
    super('Batch is not empty')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, BatchNotEmptyError)
    }
  }
}

createErrorFromCodeLookup.set(0x1797, () => new BatchNotEmptyError())
createErrorFromNameLookup.set('BatchNotEmpty', () => new BatchNotEmptyError())

/**
 * SpendingLimitInvalidAmount: 'Invalid SpendingLimit amount'
 *
 * @category Errors
 * @category generated
 */
export class SpendingLimitInvalidAmountError extends Error {
  readonly code: number = 0x1798
  readonly name: string = 'SpendingLimitInvalidAmount'
  constructor() {
    super('Invalid SpendingLimit amount')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SpendingLimitInvalidAmountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1798,
  () => new SpendingLimitInvalidAmountError()
)
createErrorFromNameLookup.set(
  'SpendingLimitInvalidAmount',
  () => new SpendingLimitInvalidAmountError()
)

/**
 * InvalidInstructionArgs: 'Invalid Instruction Arguments'
 *
 * @category Errors
 * @category generated
 */
export class InvalidInstructionArgsError extends Error {
  readonly code: number = 0x1799
  readonly name: string = 'InvalidInstructionArgs'
  constructor() {
    super('Invalid Instruction Arguments')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidInstructionArgsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1799, () => new InvalidInstructionArgsError())
createErrorFromNameLookup.set(
  'InvalidInstructionArgs',
  () => new InvalidInstructionArgsError()
)

/**
 * FinalBufferHashMismatch: 'Final message buffer hash doesnt match the expected hash'
 *
 * @category Errors
 * @category generated
 */
export class FinalBufferHashMismatchError extends Error {
  readonly code: number = 0x179a
  readonly name: string = 'FinalBufferHashMismatch'
  constructor() {
    super('Final message buffer hash doesnt match the expected hash')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, FinalBufferHashMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x179a, () => new FinalBufferHashMismatchError())
createErrorFromNameLookup.set(
  'FinalBufferHashMismatch',
  () => new FinalBufferHashMismatchError()
)

/**
 * FinalBufferSizeExceeded: 'Final buffer size cannot exceed 4000 bytes'
 *
 * @category Errors
 * @category generated
 */
export class FinalBufferSizeExceededError extends Error {
  readonly code: number = 0x179b
  readonly name: string = 'FinalBufferSizeExceeded'
  constructor() {
    super('Final buffer size cannot exceed 4000 bytes')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, FinalBufferSizeExceededError)
    }
  }
}

createErrorFromCodeLookup.set(0x179b, () => new FinalBufferSizeExceededError())
createErrorFromNameLookup.set(
  'FinalBufferSizeExceeded',
  () => new FinalBufferSizeExceededError()
)

/**
 * FinalBufferSizeMismatch: 'Final buffer size mismatch'
 *
 * @category Errors
 * @category generated
 */
export class FinalBufferSizeMismatchError extends Error {
  readonly code: number = 0x179c
  readonly name: string = 'FinalBufferSizeMismatch'
  constructor() {
    super('Final buffer size mismatch')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, FinalBufferSizeMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x179c, () => new FinalBufferSizeMismatchError())
createErrorFromNameLookup.set(
  'FinalBufferSizeMismatch',
  () => new FinalBufferSizeMismatchError()
)

/**
 * SmartAccountCreateDeprecated: 'smart_account_create has been deprecated. Use smart_account_create_v2 instead.'
 *
 * @category Errors
 * @category generated
 */
export class SmartAccountCreateDeprecatedError extends Error {
  readonly code: number = 0x179d
  readonly name: string = 'SmartAccountCreateDeprecated'
  constructor() {
    super(
      'smart_account_create has been deprecated. Use smart_account_create_v2 instead.'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SmartAccountCreateDeprecatedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x179d,
  () => new SmartAccountCreateDeprecatedError()
)
createErrorFromNameLookup.set(
  'SmartAccountCreateDeprecated',
  () => new SmartAccountCreateDeprecatedError()
)

/**
 * ThresholdNotReached: 'Signers do not reach consensus threshold'
 *
 * @category Errors
 * @category generated
 */
export class ThresholdNotReachedError extends Error {
  readonly code: number = 0x179e
  readonly name: string = 'ThresholdNotReached'
  constructor() {
    super('Signers do not reach consensus threshold')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ThresholdNotReachedError)
    }
  }
}

createErrorFromCodeLookup.set(0x179e, () => new ThresholdNotReachedError())
createErrorFromNameLookup.set(
  'ThresholdNotReached',
  () => new ThresholdNotReachedError()
)

/**
 * InvalidSignerCount: 'Invalid number of signer accounts. Must be greater or equal to the threshold'
 *
 * @category Errors
 * @category generated
 */
export class InvalidSignerCountError extends Error {
  readonly code: number = 0x179f
  readonly name: string = 'InvalidSignerCount'
  constructor() {
    super(
      'Invalid number of signer accounts. Must be greater or equal to the threshold'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidSignerCountError)
    }
  }
}

createErrorFromCodeLookup.set(0x179f, () => new InvalidSignerCountError())
createErrorFromNameLookup.set(
  'InvalidSignerCount',
  () => new InvalidSignerCountError()
)

/**
 * MissingSignature: 'Missing signature'
 *
 * @category Errors
 * @category generated
 */
export class MissingSignatureError extends Error {
  readonly code: number = 0x17a0
  readonly name: string = 'MissingSignature'
  constructor() {
    super('Missing signature')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MissingSignatureError)
    }
  }
}

createErrorFromCodeLookup.set(0x17a0, () => new MissingSignatureError())
createErrorFromNameLookup.set(
  'MissingSignature',
  () => new MissingSignatureError()
)

/**
 * InsufficientAggregatePermissions: 'Insufficient aggregate permissions across signing members'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientAggregatePermissionsError extends Error {
  readonly code: number = 0x17a1
  readonly name: string = 'InsufficientAggregatePermissions'
  constructor() {
    super('Insufficient aggregate permissions across signing members')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientAggregatePermissionsError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17a1,
  () => new InsufficientAggregatePermissionsError()
)
createErrorFromNameLookup.set(
  'InsufficientAggregatePermissions',
  () => new InsufficientAggregatePermissionsError()
)

/**
 * InsufficientVotePermissions: 'Insufficient vote permissions across signing members'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientVotePermissionsError extends Error {
  readonly code: number = 0x17a2
  readonly name: string = 'InsufficientVotePermissions'
  constructor() {
    super('Insufficient vote permissions across signing members')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientVotePermissionsError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17a2,
  () => new InsufficientVotePermissionsError()
)
createErrorFromNameLookup.set(
  'InsufficientVotePermissions',
  () => new InsufficientVotePermissionsError()
)

/**
 * TimeLockNotZero: 'Smart account must not be time locked'
 *
 * @category Errors
 * @category generated
 */
export class TimeLockNotZeroError extends Error {
  readonly code: number = 0x17a3
  readonly name: string = 'TimeLockNotZero'
  constructor() {
    super('Smart account must not be time locked')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TimeLockNotZeroError)
    }
  }
}

createErrorFromCodeLookup.set(0x17a3, () => new TimeLockNotZeroError())
createErrorFromNameLookup.set(
  'TimeLockNotZero',
  () => new TimeLockNotZeroError()
)

/**
 * NotImplemented: 'Feature not implemented'
 *
 * @category Errors
 * @category generated
 */
export class NotImplementedError extends Error {
  readonly code: number = 0x17a4
  readonly name: string = 'NotImplemented'
  constructor() {
    super('Feature not implemented')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotImplementedError)
    }
  }
}

createErrorFromCodeLookup.set(0x17a4, () => new NotImplementedError())
createErrorFromNameLookup.set('NotImplemented', () => new NotImplementedError())

/**
 * SpendingLimitInvalidCadenceConfiguration: 'Invalid cadence configuration'
 *
 * @category Errors
 * @category generated
 */
export class SpendingLimitInvalidCadenceConfigurationError extends Error {
  readonly code: number = 0x17a5
  readonly name: string = 'SpendingLimitInvalidCadenceConfiguration'
  constructor() {
    super('Invalid cadence configuration')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        SpendingLimitInvalidCadenceConfigurationError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17a5,
  () => new SpendingLimitInvalidCadenceConfigurationError()
)
createErrorFromNameLookup.set(
  'SpendingLimitInvalidCadenceConfiguration',
  () => new SpendingLimitInvalidCadenceConfigurationError()
)

/**
 * InvalidDataConstraint: 'Invalid data constraint'
 *
 * @category Errors
 * @category generated
 */
export class InvalidDataConstraintError extends Error {
  readonly code: number = 0x17a6
  readonly name: string = 'InvalidDataConstraint'
  constructor() {
    super('Invalid data constraint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidDataConstraintError)
    }
  }
}

createErrorFromCodeLookup.set(0x17a6, () => new InvalidDataConstraintError())
createErrorFromNameLookup.set(
  'InvalidDataConstraint',
  () => new InvalidDataConstraintError()
)

/**
 * InvalidPayload: 'Invalid payload'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPayloadError extends Error {
  readonly code: number = 0x17a7
  readonly name: string = 'InvalidPayload'
  constructor() {
    super('Invalid payload')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidPayloadError)
    }
  }
}

createErrorFromCodeLookup.set(0x17a7, () => new InvalidPayloadError())
createErrorFromNameLookup.set('InvalidPayload', () => new InvalidPayloadError())

/**
 * ProtectedInstruction: 'Protected instruction'
 *
 * @category Errors
 * @category generated
 */
export class ProtectedInstructionError extends Error {
  readonly code: number = 0x17a8
  readonly name: string = 'ProtectedInstruction'
  constructor() {
    super('Protected instruction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProtectedInstructionError)
    }
  }
}

createErrorFromCodeLookup.set(0x17a8, () => new ProtectedInstructionError())
createErrorFromNameLookup.set(
  'ProtectedInstruction',
  () => new ProtectedInstructionError()
)

/**
 * PlaceholderError: 'Placeholder error'
 *
 * @category Errors
 * @category generated
 */
export class PlaceholderErrorError extends Error {
  readonly code: number = 0x17a9
  readonly name: string = 'PlaceholderError'
  constructor() {
    super('Placeholder error')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PlaceholderErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x17a9, () => new PlaceholderErrorError())
createErrorFromNameLookup.set(
  'PlaceholderError',
  () => new PlaceholderErrorError()
)

/**
 * InvalidPolicyPayload: 'Invalid policy payload'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPolicyPayloadError extends Error {
  readonly code: number = 0x17aa
  readonly name: string = 'InvalidPolicyPayload'
  constructor() {
    super('Invalid policy payload')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidPolicyPayloadError)
    }
  }
}

createErrorFromCodeLookup.set(0x17aa, () => new InvalidPolicyPayloadError())
createErrorFromNameLookup.set(
  'InvalidPolicyPayload',
  () => new InvalidPolicyPayloadError()
)

/**
 * InvalidEmptyPolicy: 'Invalid empty policy'
 *
 * @category Errors
 * @category generated
 */
export class InvalidEmptyPolicyError extends Error {
  readonly code: number = 0x17ab
  readonly name: string = 'InvalidEmptyPolicy'
  constructor() {
    super('Invalid empty policy')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidEmptyPolicyError)
    }
  }
}

createErrorFromCodeLookup.set(0x17ab, () => new InvalidEmptyPolicyError())
createErrorFromNameLookup.set(
  'InvalidEmptyPolicy',
  () => new InvalidEmptyPolicyError()
)

/**
 * TransactionForAnotherPolicy: 'Transaction is for another policy'
 *
 * @category Errors
 * @category generated
 */
export class TransactionForAnotherPolicyError extends Error {
  readonly code: number = 0x17ac
  readonly name: string = 'TransactionForAnotherPolicy'
  constructor() {
    super('Transaction is for another policy')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TransactionForAnotherPolicyError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17ac,
  () => new TransactionForAnotherPolicyError()
)
createErrorFromNameLookup.set(
  'TransactionForAnotherPolicy',
  () => new TransactionForAnotherPolicyError()
)

/**
 * ProgramInteractionAsyncPayloadNotAllowedWithSyncTransaction: 'Program interaction sync payload not allowed with async transaction'
 *
 * @category Errors
 * @category generated
 */
export class ProgramInteractionAsyncPayloadNotAllowedWithSyncTransactionError extends Error {
  readonly code: number = 0x17ad
  readonly name: string =
    'ProgramInteractionAsyncPayloadNotAllowedWithSyncTransaction'
  constructor() {
    super('Program interaction sync payload not allowed with async transaction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        ProgramInteractionAsyncPayloadNotAllowedWithSyncTransactionError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17ad,
  () => new ProgramInteractionAsyncPayloadNotAllowedWithSyncTransactionError()
)
createErrorFromNameLookup.set(
  'ProgramInteractionAsyncPayloadNotAllowedWithSyncTransaction',
  () => new ProgramInteractionAsyncPayloadNotAllowedWithSyncTransactionError()
)

/**
 * ProgramInteractionSyncPayloadNotAllowedWithAsyncTransaction: 'Program interaction sync payload not allowed with sync transaction'
 *
 * @category Errors
 * @category generated
 */
export class ProgramInteractionSyncPayloadNotAllowedWithAsyncTransactionError extends Error {
  readonly code: number = 0x17ae
  readonly name: string =
    'ProgramInteractionSyncPayloadNotAllowedWithAsyncTransaction'
  constructor() {
    super('Program interaction sync payload not allowed with sync transaction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        ProgramInteractionSyncPayloadNotAllowedWithAsyncTransactionError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17ae,
  () => new ProgramInteractionSyncPayloadNotAllowedWithAsyncTransactionError()
)
createErrorFromNameLookup.set(
  'ProgramInteractionSyncPayloadNotAllowedWithAsyncTransaction',
  () => new ProgramInteractionSyncPayloadNotAllowedWithAsyncTransactionError()
)

/**
 * ProgramInteractionDataTooShort: 'Program interaction data constraint failed: instruction data too short'
 *
 * @category Errors
 * @category generated
 */
export class ProgramInteractionDataTooShortError extends Error {
  readonly code: number = 0x17af
  readonly name: string = 'ProgramInteractionDataTooShort'
  constructor() {
    super(
      'Program interaction data constraint failed: instruction data too short'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProgramInteractionDataTooShortError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17af,
  () => new ProgramInteractionDataTooShortError()
)
createErrorFromNameLookup.set(
  'ProgramInteractionDataTooShort',
  () => new ProgramInteractionDataTooShortError()
)

/**
 * ProgramInteractionInvalidNumericValue: 'Program interaction data constraint failed: invalid numeric value'
 *
 * @category Errors
 * @category generated
 */
export class ProgramInteractionInvalidNumericValueError extends Error {
  readonly code: number = 0x17b0
  readonly name: string = 'ProgramInteractionInvalidNumericValue'
  constructor() {
    super('Program interaction data constraint failed: invalid numeric value')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProgramInteractionInvalidNumericValueError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17b0,
  () => new ProgramInteractionInvalidNumericValueError()
)
createErrorFromNameLookup.set(
  'ProgramInteractionInvalidNumericValue',
  () => new ProgramInteractionInvalidNumericValueError()
)

/**
 * ProgramInteractionInvalidByteSequence: 'Program interaction data constraint failed: invalid byte sequence'
 *
 * @category Errors
 * @category generated
 */
export class ProgramInteractionInvalidByteSequenceError extends Error {
  readonly code: number = 0x17b1
  readonly name: string = 'ProgramInteractionInvalidByteSequence'
  constructor() {
    super('Program interaction data constraint failed: invalid byte sequence')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProgramInteractionInvalidByteSequenceError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17b1,
  () => new ProgramInteractionInvalidByteSequenceError()
)
createErrorFromNameLookup.set(
  'ProgramInteractionInvalidByteSequence',
  () => new ProgramInteractionInvalidByteSequenceError()
)

/**
 * ProgramInteractionUnsupportedSliceOperator: 'Program interaction data constraint failed: unsupported operator for byte slice'
 *
 * @category Errors
 * @category generated
 */
export class ProgramInteractionUnsupportedSliceOperatorError extends Error {
  readonly code: number = 0x17b2
  readonly name: string = 'ProgramInteractionUnsupportedSliceOperator'
  constructor() {
    super(
      'Program interaction data constraint failed: unsupported operator for byte slice'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        ProgramInteractionUnsupportedSliceOperatorError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17b2,
  () => new ProgramInteractionUnsupportedSliceOperatorError()
)
createErrorFromNameLookup.set(
  'ProgramInteractionUnsupportedSliceOperator',
  () => new ProgramInteractionUnsupportedSliceOperatorError()
)

/**
 * ProgramInteractionDataParsingError: 'Program interaction constraint failed: instruction data parsing error'
 *
 * @category Errors
 * @category generated
 */
export class ProgramInteractionDataParsingErrorError extends Error {
  readonly code: number = 0x17b3
  readonly name: string = 'ProgramInteractionDataParsingError'
  constructor() {
    super(
      'Program interaction constraint failed: instruction data parsing error'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProgramInteractionDataParsingErrorError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17b3,
  () => new ProgramInteractionDataParsingErrorError()
)
createErrorFromNameLookup.set(
  'ProgramInteractionDataParsingError',
  () => new ProgramInteractionDataParsingErrorError()
)

/**
 * ProgramInteractionProgramIdMismatch: 'Program interaction constraint failed: program ID mismatch'
 *
 * @category Errors
 * @category generated
 */
export class ProgramInteractionProgramIdMismatchError extends Error {
  readonly code: number = 0x17b4
  readonly name: string = 'ProgramInteractionProgramIdMismatch'
  constructor() {
    super('Program interaction constraint failed: program ID mismatch')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProgramInteractionProgramIdMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17b4,
  () => new ProgramInteractionProgramIdMismatchError()
)
createErrorFromNameLookup.set(
  'ProgramInteractionProgramIdMismatch',
  () => new ProgramInteractionProgramIdMismatchError()
)

/**
 * ProgramInteractionAccountConstraintViolated: 'Program interaction constraint violation: account constraint'
 *
 * @category Errors
 * @category generated
 */
export class ProgramInteractionAccountConstraintViolatedError extends Error {
  readonly code: number = 0x17b5
  readonly name: string = 'ProgramInteractionAccountConstraintViolated'
  constructor() {
    super('Program interaction constraint violation: account constraint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        ProgramInteractionAccountConstraintViolatedError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17b5,
  () => new ProgramInteractionAccountConstraintViolatedError()
)
createErrorFromNameLookup.set(
  'ProgramInteractionAccountConstraintViolated',
  () => new ProgramInteractionAccountConstraintViolatedError()
)

/**
 * ProgramInteractionConstraintIndexOutOfBounds: 'Program interaction constraint violation: instruction constraint index out of bounds'
 *
 * @category Errors
 * @category generated
 */
export class ProgramInteractionConstraintIndexOutOfBoundsError extends Error {
  readonly code: number = 0x17b6
  readonly name: string = 'ProgramInteractionConstraintIndexOutOfBounds'
  constructor() {
    super(
      'Program interaction constraint violation: instruction constraint index out of bounds'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        ProgramInteractionConstraintIndexOutOfBoundsError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17b6,
  () => new ProgramInteractionConstraintIndexOutOfBoundsError()
)
createErrorFromNameLookup.set(
  'ProgramInteractionConstraintIndexOutOfBounds',
  () => new ProgramInteractionConstraintIndexOutOfBoundsError()
)

/**
 * ProgramInteractionInstructionCountMismatch: 'Program interaction constraint violation: instruction count mismatch'
 *
 * @category Errors
 * @category generated
 */
export class ProgramInteractionInstructionCountMismatchError extends Error {
  readonly code: number = 0x17b7
  readonly name: string = 'ProgramInteractionInstructionCountMismatch'
  constructor() {
    super(
      'Program interaction constraint violation: instruction count mismatch'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        ProgramInteractionInstructionCountMismatchError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17b7,
  () => new ProgramInteractionInstructionCountMismatchError()
)
createErrorFromNameLookup.set(
  'ProgramInteractionInstructionCountMismatch',
  () => new ProgramInteractionInstructionCountMismatchError()
)

/**
 * ProgramInteractionInsufficientLamportAllowance: 'Program interaction constraint violation: insufficient remaining lamport allowance'
 *
 * @category Errors
 * @category generated
 */
export class ProgramInteractionInsufficientLamportAllowanceError extends Error {
  readonly code: number = 0x17b8
  readonly name: string = 'ProgramInteractionInsufficientLamportAllowance'
  constructor() {
    super(
      'Program interaction constraint violation: insufficient remaining lamport allowance'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        ProgramInteractionInsufficientLamportAllowanceError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17b8,
  () => new ProgramInteractionInsufficientLamportAllowanceError()
)
createErrorFromNameLookup.set(
  'ProgramInteractionInsufficientLamportAllowance',
  () => new ProgramInteractionInsufficientLamportAllowanceError()
)

/**
 * ProgramInteractionInsufficientTokenAllowance: 'Program interaction constraint violation: insufficient remaining token allowance'
 *
 * @category Errors
 * @category generated
 */
export class ProgramInteractionInsufficientTokenAllowanceError extends Error {
  readonly code: number = 0x17b9
  readonly name: string = 'ProgramInteractionInsufficientTokenAllowance'
  constructor() {
    super(
      'Program interaction constraint violation: insufficient remaining token allowance'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        ProgramInteractionInsufficientTokenAllowanceError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17b9,
  () => new ProgramInteractionInsufficientTokenAllowanceError()
)
createErrorFromNameLookup.set(
  'ProgramInteractionInsufficientTokenAllowance',
  () => new ProgramInteractionInsufficientTokenAllowanceError()
)

/**
 * ProgramInteractionModifiedIllegalBalance: 'Program interaction constraint violation: modified illegal balance'
 *
 * @category Errors
 * @category generated
 */
export class ProgramInteractionModifiedIllegalBalanceError extends Error {
  readonly code: number = 0x17ba
  readonly name: string = 'ProgramInteractionModifiedIllegalBalance'
  constructor() {
    super('Program interaction constraint violation: modified illegal balance')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        ProgramInteractionModifiedIllegalBalanceError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17ba,
  () => new ProgramInteractionModifiedIllegalBalanceError()
)
createErrorFromNameLookup.set(
  'ProgramInteractionModifiedIllegalBalance',
  () => new ProgramInteractionModifiedIllegalBalanceError()
)

/**
 * ProgramInteractionIllegalTokenAccountModification: 'Program interaction constraint violation: illegal token account modification'
 *
 * @category Errors
 * @category generated
 */
export class ProgramInteractionIllegalTokenAccountModificationError extends Error {
  readonly code: number = 0x17bb
  readonly name: string = 'ProgramInteractionIllegalTokenAccountModification'
  constructor() {
    super(
      'Program interaction constraint violation: illegal token account modification'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        ProgramInteractionIllegalTokenAccountModificationError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17bb,
  () => new ProgramInteractionIllegalTokenAccountModificationError()
)
createErrorFromNameLookup.set(
  'ProgramInteractionIllegalTokenAccountModification',
  () => new ProgramInteractionIllegalTokenAccountModificationError()
)

/**
 * ProgramInteractionDuplicateSpendingLimit: 'Program interaction invariant violation: duplicate spending limit for the same mint'
 *
 * @category Errors
 * @category generated
 */
export class ProgramInteractionDuplicateSpendingLimitError extends Error {
  readonly code: number = 0x17bc
  readonly name: string = 'ProgramInteractionDuplicateSpendingLimit'
  constructor() {
    super(
      'Program interaction invariant violation: duplicate spending limit for the same mint'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        ProgramInteractionDuplicateSpendingLimitError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17bc,
  () => new ProgramInteractionDuplicateSpendingLimitError()
)
createErrorFromNameLookup.set(
  'ProgramInteractionDuplicateSpendingLimit',
  () => new ProgramInteractionDuplicateSpendingLimitError()
)

/**
 * SpendingLimitNotActive: 'Spending limit is not active'
 *
 * @category Errors
 * @category generated
 */
export class SpendingLimitNotActiveError extends Error {
  readonly code: number = 0x17bd
  readonly name: string = 'SpendingLimitNotActive'
  constructor() {
    super('Spending limit is not active')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SpendingLimitNotActiveError)
    }
  }
}

createErrorFromCodeLookup.set(0x17bd, () => new SpendingLimitNotActiveError())
createErrorFromNameLookup.set(
  'SpendingLimitNotActive',
  () => new SpendingLimitNotActiveError()
)

/**
 * SpendingLimitExpired: 'Spending limit is expired'
 *
 * @category Errors
 * @category generated
 */
export class SpendingLimitExpiredError extends Error {
  readonly code: number = 0x17be
  readonly name: string = 'SpendingLimitExpired'
  constructor() {
    super('Spending limit is expired')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SpendingLimitExpiredError)
    }
  }
}

createErrorFromCodeLookup.set(0x17be, () => new SpendingLimitExpiredError())
createErrorFromNameLookup.set(
  'SpendingLimitExpired',
  () => new SpendingLimitExpiredError()
)

/**
 * SpendingLimitPolicyInvariantAccumulateUnused: 'Spending limit policy invariant violation: usage state cannot be Some() if accumulate_unused is true'
 *
 * @category Errors
 * @category generated
 */
export class SpendingLimitPolicyInvariantAccumulateUnusedError extends Error {
  readonly code: number = 0x17bf
  readonly name: string = 'SpendingLimitPolicyInvariantAccumulateUnused'
  constructor() {
    super(
      'Spending limit policy invariant violation: usage state cannot be Some() if accumulate_unused is true'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        SpendingLimitPolicyInvariantAccumulateUnusedError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17bf,
  () => new SpendingLimitPolicyInvariantAccumulateUnusedError()
)
createErrorFromNameLookup.set(
  'SpendingLimitPolicyInvariantAccumulateUnused',
  () => new SpendingLimitPolicyInvariantAccumulateUnusedError()
)

/**
 * SpendingLimitViolatesExactQuantityConstraint: 'Amount violates exact quantity constraint'
 *
 * @category Errors
 * @category generated
 */
export class SpendingLimitViolatesExactQuantityConstraintError extends Error {
  readonly code: number = 0x17c0
  readonly name: string = 'SpendingLimitViolatesExactQuantityConstraint'
  constructor() {
    super('Amount violates exact quantity constraint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        SpendingLimitViolatesExactQuantityConstraintError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17c0,
  () => new SpendingLimitViolatesExactQuantityConstraintError()
)
createErrorFromNameLookup.set(
  'SpendingLimitViolatesExactQuantityConstraint',
  () => new SpendingLimitViolatesExactQuantityConstraintError()
)

/**
 * SpendingLimitViolatesMaxPerUseConstraint: 'Amount violates max per use constraint'
 *
 * @category Errors
 * @category generated
 */
export class SpendingLimitViolatesMaxPerUseConstraintError extends Error {
  readonly code: number = 0x17c1
  readonly name: string = 'SpendingLimitViolatesMaxPerUseConstraint'
  constructor() {
    super('Amount violates max per use constraint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        SpendingLimitViolatesMaxPerUseConstraintError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17c1,
  () => new SpendingLimitViolatesMaxPerUseConstraintError()
)
createErrorFromNameLookup.set(
  'SpendingLimitViolatesMaxPerUseConstraint',
  () => new SpendingLimitViolatesMaxPerUseConstraintError()
)

/**
 * SpendingLimitInsufficientRemainingAmount: 'Spending limit is insufficient'
 *
 * @category Errors
 * @category generated
 */
export class SpendingLimitInsufficientRemainingAmountError extends Error {
  readonly code: number = 0x17c2
  readonly name: string = 'SpendingLimitInsufficientRemainingAmount'
  constructor() {
    super('Spending limit is insufficient')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        SpendingLimitInsufficientRemainingAmountError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17c2,
  () => new SpendingLimitInsufficientRemainingAmountError()
)
createErrorFromNameLookup.set(
  'SpendingLimitInsufficientRemainingAmount',
  () => new SpendingLimitInsufficientRemainingAmountError()
)

/**
 * SpendingLimitInvariantMaxPerPeriodZero: 'Spending limit invariant violation: max per period must be non-zero'
 *
 * @category Errors
 * @category generated
 */
export class SpendingLimitInvariantMaxPerPeriodZeroError extends Error {
  readonly code: number = 0x17c3
  readonly name: string = 'SpendingLimitInvariantMaxPerPeriodZero'
  constructor() {
    super('Spending limit invariant violation: max per period must be non-zero')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SpendingLimitInvariantMaxPerPeriodZeroError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17c3,
  () => new SpendingLimitInvariantMaxPerPeriodZeroError()
)
createErrorFromNameLookup.set(
  'SpendingLimitInvariantMaxPerPeriodZero',
  () => new SpendingLimitInvariantMaxPerPeriodZeroError()
)

/**
 * SpendingLimitInvariantStartTimePositive: 'Spending limit invariant violation: start time must be positive'
 *
 * @category Errors
 * @category generated
 */
export class SpendingLimitInvariantStartTimePositiveError extends Error {
  readonly code: number = 0x17c4
  readonly name: string = 'SpendingLimitInvariantStartTimePositive'
  constructor() {
    super('Spending limit invariant violation: start time must be positive')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        SpendingLimitInvariantStartTimePositiveError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17c4,
  () => new SpendingLimitInvariantStartTimePositiveError()
)
createErrorFromNameLookup.set(
  'SpendingLimitInvariantStartTimePositive',
  () => new SpendingLimitInvariantStartTimePositiveError()
)

/**
 * SpendingLimitInvariantExpirationSmallerThanStart: 'Spending limit invariant violation: expiration must be greater than start'
 *
 * @category Errors
 * @category generated
 */
export class SpendingLimitInvariantExpirationSmallerThanStartError extends Error {
  readonly code: number = 0x17c5
  readonly name: string = 'SpendingLimitInvariantExpirationSmallerThanStart'
  constructor() {
    super(
      'Spending limit invariant violation: expiration must be greater than start'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        SpendingLimitInvariantExpirationSmallerThanStartError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17c5,
  () => new SpendingLimitInvariantExpirationSmallerThanStartError()
)
createErrorFromNameLookup.set(
  'SpendingLimitInvariantExpirationSmallerThanStart',
  () => new SpendingLimitInvariantExpirationSmallerThanStartError()
)

/**
 * SpendingLimitInvariantOverflowEnabledMustHaveExpiration: 'Spending limit invariant violation: overflow enabled must have expiration'
 *
 * @category Errors
 * @category generated
 */
export class SpendingLimitInvariantOverflowEnabledMustHaveExpirationError extends Error {
  readonly code: number = 0x17c6
  readonly name: string =
    'SpendingLimitInvariantOverflowEnabledMustHaveExpiration'
  constructor() {
    super(
      'Spending limit invariant violation: overflow enabled must have expiration'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        SpendingLimitInvariantOverflowEnabledMustHaveExpirationError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17c6,
  () => new SpendingLimitInvariantOverflowEnabledMustHaveExpirationError()
)
createErrorFromNameLookup.set(
  'SpendingLimitInvariantOverflowEnabledMustHaveExpiration',
  () => new SpendingLimitInvariantOverflowEnabledMustHaveExpirationError()
)

/**
 * SpendingLimitInvariantOneTimePeriodCannotHaveOverflowEnabled: 'Spending limit invariant violation: one time period cannot have overflow enabled'
 *
 * @category Errors
 * @category generated
 */
export class SpendingLimitInvariantOneTimePeriodCannotHaveOverflowEnabledError extends Error {
  readonly code: number = 0x17c7
  readonly name: string =
    'SpendingLimitInvariantOneTimePeriodCannotHaveOverflowEnabled'
  constructor() {
    super(
      'Spending limit invariant violation: one time period cannot have overflow enabled'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        SpendingLimitInvariantOneTimePeriodCannotHaveOverflowEnabledError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17c7,
  () => new SpendingLimitInvariantOneTimePeriodCannotHaveOverflowEnabledError()
)
createErrorFromNameLookup.set(
  'SpendingLimitInvariantOneTimePeriodCannotHaveOverflowEnabled',
  () => new SpendingLimitInvariantOneTimePeriodCannotHaveOverflowEnabledError()
)

/**
 * SpendingLimitInvariantOverflowRemainingAmountGreaterThanMaxAmount: 'Spending limit invariant violation: remaining amount must be less than max amount'
 *
 * @category Errors
 * @category generated
 */
export class SpendingLimitInvariantOverflowRemainingAmountGreaterThanMaxAmountError extends Error {
  readonly code: number = 0x17c8
  readonly name: string =
    'SpendingLimitInvariantOverflowRemainingAmountGreaterThanMaxAmount'
  constructor() {
    super(
      'Spending limit invariant violation: remaining amount must be less than max amount'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        SpendingLimitInvariantOverflowRemainingAmountGreaterThanMaxAmountError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17c8,
  () =>
    new SpendingLimitInvariantOverflowRemainingAmountGreaterThanMaxAmountError()
)
createErrorFromNameLookup.set(
  'SpendingLimitInvariantOverflowRemainingAmountGreaterThanMaxAmount',
  () =>
    new SpendingLimitInvariantOverflowRemainingAmountGreaterThanMaxAmountError()
)

/**
 * SpendingLimitInvariantRemainingAmountGreaterThanMaxPerPeriod: 'Spending limit invariant violation: remaining amount must be less than or equal to max per period'
 *
 * @category Errors
 * @category generated
 */
export class SpendingLimitInvariantRemainingAmountGreaterThanMaxPerPeriodError extends Error {
  readonly code: number = 0x17c9
  readonly name: string =
    'SpendingLimitInvariantRemainingAmountGreaterThanMaxPerPeriod'
  constructor() {
    super(
      'Spending limit invariant violation: remaining amount must be less than or equal to max per period'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        SpendingLimitInvariantRemainingAmountGreaterThanMaxPerPeriodError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17c9,
  () => new SpendingLimitInvariantRemainingAmountGreaterThanMaxPerPeriodError()
)
createErrorFromNameLookup.set(
  'SpendingLimitInvariantRemainingAmountGreaterThanMaxPerPeriod',
  () => new SpendingLimitInvariantRemainingAmountGreaterThanMaxPerPeriodError()
)

/**
 * SpendingLimitInvariantExactQuantityMaxPerUseZero: 'Spending limit invariant violation: exact quantity must have max per use non-zero'
 *
 * @category Errors
 * @category generated
 */
export class SpendingLimitInvariantExactQuantityMaxPerUseZeroError extends Error {
  readonly code: number = 0x17ca
  readonly name: string = 'SpendingLimitInvariantExactQuantityMaxPerUseZero'
  constructor() {
    super(
      'Spending limit invariant violation: exact quantity must have max per use non-zero'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        SpendingLimitInvariantExactQuantityMaxPerUseZeroError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17ca,
  () => new SpendingLimitInvariantExactQuantityMaxPerUseZeroError()
)
createErrorFromNameLookup.set(
  'SpendingLimitInvariantExactQuantityMaxPerUseZero',
  () => new SpendingLimitInvariantExactQuantityMaxPerUseZeroError()
)

/**
 * SpendingLimitInvariantMaxPerUseGreaterThanMaxPerPeriod: 'Spending limit invariant violation: max per use must be less than or equal to max per period'
 *
 * @category Errors
 * @category generated
 */
export class SpendingLimitInvariantMaxPerUseGreaterThanMaxPerPeriodError extends Error {
  readonly code: number = 0x17cb
  readonly name: string =
    'SpendingLimitInvariantMaxPerUseGreaterThanMaxPerPeriod'
  constructor() {
    super(
      'Spending limit invariant violation: max per use must be less than or equal to max per period'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        SpendingLimitInvariantMaxPerUseGreaterThanMaxPerPeriodError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17cb,
  () => new SpendingLimitInvariantMaxPerUseGreaterThanMaxPerPeriodError()
)
createErrorFromNameLookup.set(
  'SpendingLimitInvariantMaxPerUseGreaterThanMaxPerPeriod',
  () => new SpendingLimitInvariantMaxPerUseGreaterThanMaxPerPeriodError()
)

/**
 * SpendingLimitInvariantCustomPeriodNegative: 'Spending limit invariant violation: custom period must be positive'
 *
 * @category Errors
 * @category generated
 */
export class SpendingLimitInvariantCustomPeriodNegativeError extends Error {
  readonly code: number = 0x17cc
  readonly name: string = 'SpendingLimitInvariantCustomPeriodNegative'
  constructor() {
    super('Spending limit invariant violation: custom period must be positive')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        SpendingLimitInvariantCustomPeriodNegativeError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17cc,
  () => new SpendingLimitInvariantCustomPeriodNegativeError()
)
createErrorFromNameLookup.set(
  'SpendingLimitInvariantCustomPeriodNegative',
  () => new SpendingLimitInvariantCustomPeriodNegativeError()
)

/**
 * SpendingLimitPolicyInvariantDuplicateDestinations: 'Spending limit policy invariant violation: cannot have duplicate destinations for the same mint'
 *
 * @category Errors
 * @category generated
 */
export class SpendingLimitPolicyInvariantDuplicateDestinationsError extends Error {
  readonly code: number = 0x17cd
  readonly name: string = 'SpendingLimitPolicyInvariantDuplicateDestinations'
  constructor() {
    super(
      'Spending limit policy invariant violation: cannot have duplicate destinations for the same mint'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        SpendingLimitPolicyInvariantDuplicateDestinationsError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17cd,
  () => new SpendingLimitPolicyInvariantDuplicateDestinationsError()
)
createErrorFromNameLookup.set(
  'SpendingLimitPolicyInvariantDuplicateDestinations',
  () => new SpendingLimitPolicyInvariantDuplicateDestinationsError()
)

/**
 * InternalFundTransferPolicyInvariantSourceAccountIndexNotAllowed: 'Internal fund transfer policy invariant violation: source account index is not allowed'
 *
 * @category Errors
 * @category generated
 */
export class InternalFundTransferPolicyInvariantSourceAccountIndexNotAllowedError extends Error {
  readonly code: number = 0x17ce
  readonly name: string =
    'InternalFundTransferPolicyInvariantSourceAccountIndexNotAllowed'
  constructor() {
    super(
      'Internal fund transfer policy invariant violation: source account index is not allowed'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        InternalFundTransferPolicyInvariantSourceAccountIndexNotAllowedError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17ce,
  () =>
    new InternalFundTransferPolicyInvariantSourceAccountIndexNotAllowedError()
)
createErrorFromNameLookup.set(
  'InternalFundTransferPolicyInvariantSourceAccountIndexNotAllowed',
  () =>
    new InternalFundTransferPolicyInvariantSourceAccountIndexNotAllowedError()
)

/**
 * InternalFundTransferPolicyInvariantDestinationAccountIndexNotAllowed: 'Internal fund transfer policy invariant violation: destination account index is not allowed'
 *
 * @category Errors
 * @category generated
 */
export class InternalFundTransferPolicyInvariantDestinationAccountIndexNotAllowedError extends Error {
  readonly code: number = 0x17cf
  readonly name: string =
    'InternalFundTransferPolicyInvariantDestinationAccountIndexNotAllowed'
  constructor() {
    super(
      'Internal fund transfer policy invariant violation: destination account index is not allowed'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        InternalFundTransferPolicyInvariantDestinationAccountIndexNotAllowedError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17cf,
  () =>
    new InternalFundTransferPolicyInvariantDestinationAccountIndexNotAllowedError()
)
createErrorFromNameLookup.set(
  'InternalFundTransferPolicyInvariantDestinationAccountIndexNotAllowed',
  () =>
    new InternalFundTransferPolicyInvariantDestinationAccountIndexNotAllowedError()
)

/**
 * InternalFundTransferPolicyInvariantSourceAndDestinationCannotBeTheSame: 'Internal fund transfer policy invariant violation: source and destination cannot be the same'
 *
 * @category Errors
 * @category generated
 */
export class InternalFundTransferPolicyInvariantSourceAndDestinationCannotBeTheSameError extends Error {
  readonly code: number = 0x17d0
  readonly name: string =
    'InternalFundTransferPolicyInvariantSourceAndDestinationCannotBeTheSame'
  constructor() {
    super(
      'Internal fund transfer policy invariant violation: source and destination cannot be the same'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        InternalFundTransferPolicyInvariantSourceAndDestinationCannotBeTheSameError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17d0,
  () =>
    new InternalFundTransferPolicyInvariantSourceAndDestinationCannotBeTheSameError()
)
createErrorFromNameLookup.set(
  'InternalFundTransferPolicyInvariantSourceAndDestinationCannotBeTheSame',
  () =>
    new InternalFundTransferPolicyInvariantSourceAndDestinationCannotBeTheSameError()
)

/**
 * InternalFundTransferPolicyInvariantMintNotAllowed: 'Internal fund transfer policy invariant violation: mint is not allowed'
 *
 * @category Errors
 * @category generated
 */
export class InternalFundTransferPolicyInvariantMintNotAllowedError extends Error {
  readonly code: number = 0x17d1
  readonly name: string = 'InternalFundTransferPolicyInvariantMintNotAllowed'
  constructor() {
    super(
      'Internal fund transfer policy invariant violation: mint is not allowed'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        InternalFundTransferPolicyInvariantMintNotAllowedError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17d1,
  () => new InternalFundTransferPolicyInvariantMintNotAllowedError()
)
createErrorFromNameLookup.set(
  'InternalFundTransferPolicyInvariantMintNotAllowed',
  () => new InternalFundTransferPolicyInvariantMintNotAllowedError()
)

/**
 * InternalFundTransferPolicyInvariantAmountZero: 'Internal fund transfer policy invariant violation: amount must be greater than 0'
 *
 * @category Errors
 * @category generated
 */
export class InternalFundTransferPolicyInvariantAmountZeroError extends Error {
  readonly code: number = 0x17d2
  readonly name: string = 'InternalFundTransferPolicyInvariantAmountZero'
  constructor() {
    super(
      'Internal fund transfer policy invariant violation: amount must be greater than 0'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        InternalFundTransferPolicyInvariantAmountZeroError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17d2,
  () => new InternalFundTransferPolicyInvariantAmountZeroError()
)
createErrorFromNameLookup.set(
  'InternalFundTransferPolicyInvariantAmountZero',
  () => new InternalFundTransferPolicyInvariantAmountZeroError()
)

/**
 * InternalFundTransferPolicyInvariantDuplicateMints: 'Internal fund transfer policy invariant violation: cannot have duplicate mints'
 *
 * @category Errors
 * @category generated
 */
export class InternalFundTransferPolicyInvariantDuplicateMintsError extends Error {
  readonly code: number = 0x17d3
  readonly name: string = 'InternalFundTransferPolicyInvariantDuplicateMints'
  constructor() {
    super(
      'Internal fund transfer policy invariant violation: cannot have duplicate mints'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        InternalFundTransferPolicyInvariantDuplicateMintsError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17d3,
  () => new InternalFundTransferPolicyInvariantDuplicateMintsError()
)
createErrorFromNameLookup.set(
  'InternalFundTransferPolicyInvariantDuplicateMints',
  () => new InternalFundTransferPolicyInvariantDuplicateMintsError()
)

/**
 * ConsensusAccountNotSettings: 'Consensus account is not a settings'
 *
 * @category Errors
 * @category generated
 */
export class ConsensusAccountNotSettingsError extends Error {
  readonly code: number = 0x17d4
  readonly name: string = 'ConsensusAccountNotSettings'
  constructor() {
    super('Consensus account is not a settings')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ConsensusAccountNotSettingsError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17d4,
  () => new ConsensusAccountNotSettingsError()
)
createErrorFromNameLookup.set(
  'ConsensusAccountNotSettings',
  () => new ConsensusAccountNotSettingsError()
)

/**
 * ConsensusAccountNotPolicy: 'Consensus account is not a policy'
 *
 * @category Errors
 * @category generated
 */
export class ConsensusAccountNotPolicyError extends Error {
  readonly code: number = 0x17d5
  readonly name: string = 'ConsensusAccountNotPolicy'
  constructor() {
    super('Consensus account is not a policy')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ConsensusAccountNotPolicyError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17d5,
  () => new ConsensusAccountNotPolicyError()
)
createErrorFromNameLookup.set(
  'ConsensusAccountNotPolicy',
  () => new ConsensusAccountNotPolicyError()
)

/**
 * SettingsChangePolicyActionsMustBeNonZero: 'Settings change policy invariant violation: actions must be non-zero'
 *
 * @category Errors
 * @category generated
 */
export class SettingsChangePolicyActionsMustBeNonZeroError extends Error {
  readonly code: number = 0x17d6
  readonly name: string = 'SettingsChangePolicyActionsMustBeNonZero'
  constructor() {
    super(
      'Settings change policy invariant violation: actions must be non-zero'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        SettingsChangePolicyActionsMustBeNonZeroError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17d6,
  () => new SettingsChangePolicyActionsMustBeNonZeroError()
)
createErrorFromNameLookup.set(
  'SettingsChangePolicyActionsMustBeNonZero',
  () => new SettingsChangePolicyActionsMustBeNonZeroError()
)

/**
 * SettingsChangeInvalidSettingsKey: 'Settings change policy violation: submitted settings account must match policy settings key'
 *
 * @category Errors
 * @category generated
 */
export class SettingsChangeInvalidSettingsKeyError extends Error {
  readonly code: number = 0x17d7
  readonly name: string = 'SettingsChangeInvalidSettingsKey'
  constructor() {
    super(
      'Settings change policy violation: submitted settings account must match policy settings key'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SettingsChangeInvalidSettingsKeyError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17d7,
  () => new SettingsChangeInvalidSettingsKeyError()
)
createErrorFromNameLookup.set(
  'SettingsChangeInvalidSettingsKey',
  () => new SettingsChangeInvalidSettingsKeyError()
)

/**
 * SettingsChangeInvalidSettingsAccount: 'Settings change policy violation: submitted settings account must be writable'
 *
 * @category Errors
 * @category generated
 */
export class SettingsChangeInvalidSettingsAccountError extends Error {
  readonly code: number = 0x17d8
  readonly name: string = 'SettingsChangeInvalidSettingsAccount'
  constructor() {
    super(
      'Settings change policy violation: submitted settings account must be writable'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SettingsChangeInvalidSettingsAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17d8,
  () => new SettingsChangeInvalidSettingsAccountError()
)
createErrorFromNameLookup.set(
  'SettingsChangeInvalidSettingsAccount',
  () => new SettingsChangeInvalidSettingsAccountError()
)

/**
 * SettingsChangeInvalidRentPayer: 'Settings change policy violation: rent payer must be writable and signer'
 *
 * @category Errors
 * @category generated
 */
export class SettingsChangeInvalidRentPayerError extends Error {
  readonly code: number = 0x17d9
  readonly name: string = 'SettingsChangeInvalidRentPayer'
  constructor() {
    super(
      'Settings change policy violation: rent payer must be writable and signer'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SettingsChangeInvalidRentPayerError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17d9,
  () => new SettingsChangeInvalidRentPayerError()
)
createErrorFromNameLookup.set(
  'SettingsChangeInvalidRentPayer',
  () => new SettingsChangeInvalidRentPayerError()
)

/**
 * SettingsChangeInvalidSystemProgram: 'Settings change policy violation: system program must be the system program'
 *
 * @category Errors
 * @category generated
 */
export class SettingsChangeInvalidSystemProgramError extends Error {
  readonly code: number = 0x17da
  readonly name: string = 'SettingsChangeInvalidSystemProgram'
  constructor() {
    super(
      'Settings change policy violation: system program must be the system program'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SettingsChangeInvalidSystemProgramError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17da,
  () => new SettingsChangeInvalidSystemProgramError()
)
createErrorFromNameLookup.set(
  'SettingsChangeInvalidSystemProgram',
  () => new SettingsChangeInvalidSystemProgramError()
)

/**
 * SettingsChangeAddSignerViolation: 'Settings change policy violation: signer does not match allowed signer'
 *
 * @category Errors
 * @category generated
 */
export class SettingsChangeAddSignerViolationError extends Error {
  readonly code: number = 0x17db
  readonly name: string = 'SettingsChangeAddSignerViolation'
  constructor() {
    super(
      'Settings change policy violation: signer does not match allowed signer'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SettingsChangeAddSignerViolationError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17db,
  () => new SettingsChangeAddSignerViolationError()
)
createErrorFromNameLookup.set(
  'SettingsChangeAddSignerViolation',
  () => new SettingsChangeAddSignerViolationError()
)

/**
 * SettingsChangeAddSignerPermissionsViolation: 'Settings change policy violation: signer permissions does not match allowed signer permissions'
 *
 * @category Errors
 * @category generated
 */
export class SettingsChangeAddSignerPermissionsViolationError extends Error {
  readonly code: number = 0x17dc
  readonly name: string = 'SettingsChangeAddSignerPermissionsViolation'
  constructor() {
    super(
      'Settings change policy violation: signer permissions does not match allowed signer permissions'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        SettingsChangeAddSignerPermissionsViolationError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17dc,
  () => new SettingsChangeAddSignerPermissionsViolationError()
)
createErrorFromNameLookup.set(
  'SettingsChangeAddSignerPermissionsViolation',
  () => new SettingsChangeAddSignerPermissionsViolationError()
)

/**
 * SettingsChangeRemoveSignerViolation: 'Settings change policy violation: signer removal does not mach allowed signer removal'
 *
 * @category Errors
 * @category generated
 */
export class SettingsChangeRemoveSignerViolationError extends Error {
  readonly code: number = 0x17dd
  readonly name: string = 'SettingsChangeRemoveSignerViolation'
  constructor() {
    super(
      'Settings change policy violation: signer removal does not mach allowed signer removal'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SettingsChangeRemoveSignerViolationError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17dd,
  () => new SettingsChangeRemoveSignerViolationError()
)
createErrorFromNameLookup.set(
  'SettingsChangeRemoveSignerViolation',
  () => new SettingsChangeRemoveSignerViolationError()
)

/**
 * SettingsChangeChangeTimelockViolation: 'Settings change policy violation: time lock does not match allowed time lock'
 *
 * @category Errors
 * @category generated
 */
export class SettingsChangeChangeTimelockViolationError extends Error {
  readonly code: number = 0x17de
  readonly name: string = 'SettingsChangeChangeTimelockViolation'
  constructor() {
    super(
      'Settings change policy violation: time lock does not match allowed time lock'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SettingsChangeChangeTimelockViolationError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17de,
  () => new SettingsChangeChangeTimelockViolationError()
)
createErrorFromNameLookup.set(
  'SettingsChangeChangeTimelockViolation',
  () => new SettingsChangeChangeTimelockViolationError()
)

/**
 * SettingsChangeActionMismatch: 'Settings change policy violation: action does not match allowed action'
 *
 * @category Errors
 * @category generated
 */
export class SettingsChangeActionMismatchError extends Error {
  readonly code: number = 0x17df
  readonly name: string = 'SettingsChangeActionMismatch'
  constructor() {
    super(
      'Settings change policy violation: action does not match allowed action'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SettingsChangeActionMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17df,
  () => new SettingsChangeActionMismatchError()
)
createErrorFromNameLookup.set(
  'SettingsChangeActionMismatch',
  () => new SettingsChangeActionMismatchError()
)

/**
 * SettingsChangePolicyInvariantDuplicateActions: 'Settings change policy invariant violation: cannot have duplicate actions'
 *
 * @category Errors
 * @category generated
 */
export class SettingsChangePolicyInvariantDuplicateActionsError extends Error {
  readonly code: number = 0x17e0
  readonly name: string = 'SettingsChangePolicyInvariantDuplicateActions'
  constructor() {
    super(
      'Settings change policy invariant violation: cannot have duplicate actions'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        SettingsChangePolicyInvariantDuplicateActionsError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17e0,
  () => new SettingsChangePolicyInvariantDuplicateActionsError()
)
createErrorFromNameLookup.set(
  'SettingsChangePolicyInvariantDuplicateActions',
  () => new SettingsChangePolicyInvariantDuplicateActionsError()
)

/**
 * SettingsChangePolicyInvariantActionIndicesActionsLengthMismatch: 'Settings change policy invariant violation: action indices must match actions length'
 *
 * @category Errors
 * @category generated
 */
export class SettingsChangePolicyInvariantActionIndicesActionsLengthMismatchError extends Error {
  readonly code: number = 0x17e1
  readonly name: string =
    'SettingsChangePolicyInvariantActionIndicesActionsLengthMismatch'
  constructor() {
    super(
      'Settings change policy invariant violation: action indices must match actions length'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        SettingsChangePolicyInvariantActionIndicesActionsLengthMismatchError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17e1,
  () =>
    new SettingsChangePolicyInvariantActionIndicesActionsLengthMismatchError()
)
createErrorFromNameLookup.set(
  'SettingsChangePolicyInvariantActionIndicesActionsLengthMismatch',
  () =>
    new SettingsChangePolicyInvariantActionIndicesActionsLengthMismatchError()
)

/**
 * SettingsChangePolicyInvariantActionIndexOutOfBounds: 'Settings change policy invariant violation: action index out of bounds'
 *
 * @category Errors
 * @category generated
 */
export class SettingsChangePolicyInvariantActionIndexOutOfBoundsError extends Error {
  readonly code: number = 0x17e2
  readonly name: string = 'SettingsChangePolicyInvariantActionIndexOutOfBounds'
  constructor() {
    super(
      'Settings change policy invariant violation: action index out of bounds'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        SettingsChangePolicyInvariantActionIndexOutOfBoundsError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17e2,
  () => new SettingsChangePolicyInvariantActionIndexOutOfBoundsError()
)
createErrorFromNameLookup.set(
  'SettingsChangePolicyInvariantActionIndexOutOfBounds',
  () => new SettingsChangePolicyInvariantActionIndexOutOfBoundsError()
)

/**
 * PolicyNotActiveYet: 'Policy is not active yet'
 *
 * @category Errors
 * @category generated
 */
export class PolicyNotActiveYetError extends Error {
  readonly code: number = 0x17e3
  readonly name: string = 'PolicyNotActiveYet'
  constructor() {
    super('Policy is not active yet')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PolicyNotActiveYetError)
    }
  }
}

createErrorFromCodeLookup.set(0x17e3, () => new PolicyNotActiveYetError())
createErrorFromNameLookup.set(
  'PolicyNotActiveYet',
  () => new PolicyNotActiveYetError()
)

/**
 * PolicyInvariantInvalidExpiration: 'Policy invariant violation: invalid policy expiration'
 *
 * @category Errors
 * @category generated
 */
export class PolicyInvariantInvalidExpirationError extends Error {
  readonly code: number = 0x17e4
  readonly name: string = 'PolicyInvariantInvalidExpiration'
  constructor() {
    super('Policy invariant violation: invalid policy expiration')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PolicyInvariantInvalidExpirationError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17e4,
  () => new PolicyInvariantInvalidExpirationError()
)
createErrorFromNameLookup.set(
  'PolicyInvariantInvalidExpiration',
  () => new PolicyInvariantInvalidExpirationError()
)

/**
 * PolicyExpirationViolationPolicySettingsKeyMismatch: 'Policy expiration violation: submitted settings key does not match policy settings key'
 *
 * @category Errors
 * @category generated
 */
export class PolicyExpirationViolationPolicySettingsKeyMismatchError extends Error {
  readonly code: number = 0x17e5
  readonly name: string = 'PolicyExpirationViolationPolicySettingsKeyMismatch'
  constructor() {
    super(
      'Policy expiration violation: submitted settings key does not match policy settings key'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        PolicyExpirationViolationPolicySettingsKeyMismatchError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17e5,
  () => new PolicyExpirationViolationPolicySettingsKeyMismatchError()
)
createErrorFromNameLookup.set(
  'PolicyExpirationViolationPolicySettingsKeyMismatch',
  () => new PolicyExpirationViolationPolicySettingsKeyMismatchError()
)

/**
 * PolicyExpirationViolationSettingsAccountNotPresent: 'Policy expiration violation: state expiration requires the settings to be submitted'
 *
 * @category Errors
 * @category generated
 */
export class PolicyExpirationViolationSettingsAccountNotPresentError extends Error {
  readonly code: number = 0x17e6
  readonly name: string = 'PolicyExpirationViolationSettingsAccountNotPresent'
  constructor() {
    super(
      'Policy expiration violation: state expiration requires the settings to be submitted'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        PolicyExpirationViolationSettingsAccountNotPresentError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17e6,
  () => new PolicyExpirationViolationSettingsAccountNotPresentError()
)
createErrorFromNameLookup.set(
  'PolicyExpirationViolationSettingsAccountNotPresent',
  () => new PolicyExpirationViolationSettingsAccountNotPresentError()
)

/**
 * PolicyExpirationViolationHashExpired: 'Policy expiration violation: state hash has expired'
 *
 * @category Errors
 * @category generated
 */
export class PolicyExpirationViolationHashExpiredError extends Error {
  readonly code: number = 0x17e7
  readonly name: string = 'PolicyExpirationViolationHashExpired'
  constructor() {
    super('Policy expiration violation: state hash has expired')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PolicyExpirationViolationHashExpiredError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17e7,
  () => new PolicyExpirationViolationHashExpiredError()
)
createErrorFromNameLookup.set(
  'PolicyExpirationViolationHashExpired',
  () => new PolicyExpirationViolationHashExpiredError()
)

/**
 * PolicyExpirationViolationTimestampExpired: 'Policy expiration violation: timestamp has expired'
 *
 * @category Errors
 * @category generated
 */
export class PolicyExpirationViolationTimestampExpiredError extends Error {
  readonly code: number = 0x17e8
  readonly name: string = 'PolicyExpirationViolationTimestampExpired'
  constructor() {
    super('Policy expiration violation: timestamp has expired')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        PolicyExpirationViolationTimestampExpiredError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17e8,
  () => new PolicyExpirationViolationTimestampExpiredError()
)
createErrorFromNameLookup.set(
  'PolicyExpirationViolationTimestampExpired',
  () => new PolicyExpirationViolationTimestampExpiredError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
