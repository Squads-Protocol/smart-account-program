/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'
import { Permissions, permissionsBeet } from './Permissions'
/**
 * This type is used to derive the {@link SettingsChangeActions} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link SettingsChangeActions} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type SettingsChangeActionsRecord = {
  AddSigner: { newSigner: web3.PublicKey; newSignerPermissions: Permissions }
  RemoveSigner: { oldSigner: web3.PublicKey }
  ChangeThreshold: { newThreshold: number }
  ChangeTimeLock: { newTimeLock: number }
}

/**
 * Union type respresenting the SettingsChangeActions data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isSettingsChangeActions*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type SettingsChangeActions =
  beet.DataEnumKeyAsKind<SettingsChangeActionsRecord>

export const isSettingsChangeActionsAddSigner = (
  x: SettingsChangeActions
): x is SettingsChangeActions & { __kind: 'AddSigner' } =>
  x.__kind === 'AddSigner'
export const isSettingsChangeActionsRemoveSigner = (
  x: SettingsChangeActions
): x is SettingsChangeActions & { __kind: 'RemoveSigner' } =>
  x.__kind === 'RemoveSigner'
export const isSettingsChangeActionsChangeThreshold = (
  x: SettingsChangeActions
): x is SettingsChangeActions & { __kind: 'ChangeThreshold' } =>
  x.__kind === 'ChangeThreshold'
export const isSettingsChangeActionsChangeTimeLock = (
  x: SettingsChangeActions
): x is SettingsChangeActions & { __kind: 'ChangeTimeLock' } =>
  x.__kind === 'ChangeTimeLock'

/**
 * @category userTypes
 * @category generated
 */
export const settingsChangeActionsBeet =
  beet.dataEnum<SettingsChangeActionsRecord>([
    [
      'AddSigner',
      new beet.BeetArgsStruct<SettingsChangeActionsRecord['AddSigner']>(
        [
          ['newSigner', beetSolana.publicKey],
          ['newSignerPermissions', permissionsBeet],
        ],
        'SettingsChangeActionsRecord["AddSigner"]'
      ),
    ],

    [
      'RemoveSigner',
      new beet.BeetArgsStruct<SettingsChangeActionsRecord['RemoveSigner']>(
        [['oldSigner', beetSolana.publicKey]],
        'SettingsChangeActionsRecord["RemoveSigner"]'
      ),
    ],

    [
      'ChangeThreshold',
      new beet.BeetArgsStruct<SettingsChangeActionsRecord['ChangeThreshold']>(
        [['newThreshold', beet.u16]],
        'SettingsChangeActionsRecord["ChangeThreshold"]'
      ),
    ],

    [
      'ChangeTimeLock',
      new beet.BeetArgsStruct<SettingsChangeActionsRecord['ChangeTimeLock']>(
        [['newTimeLock', beet.u32]],
        'SettingsChangeActionsRecord["ChangeTimeLock"]'
      ),
    ],
  ]) as beet.FixableBeet<SettingsChangeActions, SettingsChangeActions>
