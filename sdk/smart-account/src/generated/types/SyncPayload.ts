/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import { PolicyPayload, policyPayloadBeet } from './PolicyPayload'
/**
 * This type is used to derive the {@link SyncPayload} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link SyncPayload} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type SyncPayloadRecord = {
  Transaction: { fields: [Uint8Array] }
  Policy: { fields: [PolicyPayload] }
}

/**
 * Union type respresenting the SyncPayload data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isSyncPayload*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type SyncPayload = beet.DataEnumKeyAsKind<SyncPayloadRecord>

export const isSyncPayloadTransaction = (
  x: SyncPayload
): x is SyncPayload & { __kind: 'Transaction' } => x.__kind === 'Transaction'
export const isSyncPayloadPolicy = (
  x: SyncPayload
): x is SyncPayload & { __kind: 'Policy' } => x.__kind === 'Policy'

/**
 * @category userTypes
 * @category generated
 */
export const syncPayloadBeet = beet.dataEnum<SyncPayloadRecord>([
  [
    'Transaction',
    new beet.FixableBeetArgsStruct<SyncPayloadRecord['Transaction']>(
      [['fields', beet.tuple([beet.bytes])]],
      'SyncPayloadRecord["Transaction"]'
    ),
  ],
  [
    'Policy',
    new beet.FixableBeetArgsStruct<SyncPayloadRecord['Policy']>(
      [['fields', beet.tuple([policyPayloadBeet])]],
      'SyncPayloadRecord["Policy"]'
    ),
  ],
]) as beet.FixableBeet<SyncPayload, SyncPayload>
