/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import {
  SmartAccountCompiledInstruction,
  smartAccountCompiledInstructionBeet,
} from './SmartAccountCompiledInstruction'
import { PolicyPayload, policyPayloadBeet } from './PolicyPayload'
/**
 * This type is used to derive the {@link SynchronousTransactionEventPayload} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link SynchronousTransactionEventPayload} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type SynchronousTransactionEventPayloadRecord = {
  TransactionPayload: {
    accountIndex: number
    instructions: SmartAccountCompiledInstruction[]
  }
  PolicyPayload: { policyPayload: PolicyPayload }
}

/**
 * Union type respresenting the SynchronousTransactionEventPayload data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isSynchronousTransactionEventPayload*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type SynchronousTransactionEventPayload =
  beet.DataEnumKeyAsKind<SynchronousTransactionEventPayloadRecord>

export const isSynchronousTransactionEventPayloadTransactionPayload = (
  x: SynchronousTransactionEventPayload
): x is SynchronousTransactionEventPayload & { __kind: 'TransactionPayload' } =>
  x.__kind === 'TransactionPayload'
export const isSynchronousTransactionEventPayloadPolicyPayload = (
  x: SynchronousTransactionEventPayload
): x is SynchronousTransactionEventPayload & { __kind: 'PolicyPayload' } =>
  x.__kind === 'PolicyPayload'

/**
 * @category userTypes
 * @category generated
 */
export const synchronousTransactionEventPayloadBeet =
  beet.dataEnum<SynchronousTransactionEventPayloadRecord>([
    [
      'TransactionPayload',
      new beet.FixableBeetArgsStruct<
        SynchronousTransactionEventPayloadRecord['TransactionPayload']
      >(
        [
          ['accountIndex', beet.u8],
          ['instructions', beet.array(smartAccountCompiledInstructionBeet)],
        ],
        'SynchronousTransactionEventPayloadRecord["TransactionPayload"]'
      ),
    ],

    [
      'PolicyPayload',
      new beet.FixableBeetArgsStruct<
        SynchronousTransactionEventPayloadRecord['PolicyPayload']
      >(
        [['policyPayload', policyPayloadBeet]],
        'SynchronousTransactionEventPayloadRecord["PolicyPayload"]'
      ),
    ],
  ]) as beet.FixableBeet<
    SynchronousTransactionEventPayload,
    SynchronousTransactionEventPayload
  >
