/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import {
  InternalFundTransferPayload,
  internalFundTransferPayloadBeet,
} from './InternalFundTransferPayload'
import {
  ProgramInteractionPayload,
  programInteractionPayloadBeet,
} from './ProgramInteractionPayload'
import {
  SpendingLimitPayload,
  spendingLimitPayloadBeet,
} from './SpendingLimitPayload'
import {
  SettingsChangePayload,
  settingsChangePayloadBeet,
} from './SettingsChangePayload'
/**
 * This type is used to derive the {@link PolicyPayload} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link PolicyPayload} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type PolicyPayloadRecord = {
  InternalFundTransfer: { fields: [InternalFundTransferPayload] }
  ProgramInteraction: { fields: [ProgramInteractionPayload] }
  SpendingLimit: { fields: [SpendingLimitPayload] }
  SettingsChange: { fields: [SettingsChangePayload] }
}

/**
 * Union type respresenting the PolicyPayload data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isPolicyPayload*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type PolicyPayload = beet.DataEnumKeyAsKind<PolicyPayloadRecord>

export const isPolicyPayloadInternalFundTransfer = (
  x: PolicyPayload
): x is PolicyPayload & { __kind: 'InternalFundTransfer' } =>
  x.__kind === 'InternalFundTransfer'
export const isPolicyPayloadProgramInteraction = (
  x: PolicyPayload
): x is PolicyPayload & { __kind: 'ProgramInteraction' } =>
  x.__kind === 'ProgramInteraction'
export const isPolicyPayloadSpendingLimit = (
  x: PolicyPayload
): x is PolicyPayload & { __kind: 'SpendingLimit' } =>
  x.__kind === 'SpendingLimit'
export const isPolicyPayloadSettingsChange = (
  x: PolicyPayload
): x is PolicyPayload & { __kind: 'SettingsChange' } =>
  x.__kind === 'SettingsChange'

/**
 * @category userTypes
 * @category generated
 */
export const policyPayloadBeet = beet.dataEnum<PolicyPayloadRecord>([
  [
    'InternalFundTransfer',
    new beet.BeetArgsStruct<PolicyPayloadRecord['InternalFundTransfer']>(
      [['fields', beet.fixedSizeTuple([internalFundTransferPayloadBeet])]],
      'PolicyPayloadRecord["InternalFundTransfer"]'
    ),
  ],
  [
    'ProgramInteraction',
    new beet.FixableBeetArgsStruct<PolicyPayloadRecord['ProgramInteraction']>(
      [['fields', beet.tuple([programInteractionPayloadBeet])]],
      'PolicyPayloadRecord["ProgramInteraction"]'
    ),
  ],
  [
    'SpendingLimit',
    new beet.BeetArgsStruct<PolicyPayloadRecord['SpendingLimit']>(
      [['fields', beet.fixedSizeTuple([spendingLimitPayloadBeet])]],
      'PolicyPayloadRecord["SpendingLimit"]'
    ),
  ],
  [
    'SettingsChange',
    new beet.FixableBeetArgsStruct<PolicyPayloadRecord['SettingsChange']>(
      [['fields', beet.tuple([settingsChangePayloadBeet])]],
      'PolicyPayloadRecord["SettingsChange"]'
    ),
  ],
]) as beet.FixableBeet<PolicyPayload, PolicyPayload>
