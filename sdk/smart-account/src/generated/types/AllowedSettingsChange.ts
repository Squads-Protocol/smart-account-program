/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { Permissions, permissionsBeet } from './Permissions'
/**
 * This type is used to derive the {@link AllowedSettingsChange} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link AllowedSettingsChange} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type AllowedSettingsChangeRecord = {
  AddSigner: {
    newSigner: beet.COption<web3.PublicKey>
    newSignerPermissions: beet.COption<Permissions>
  }
  RemoveSigner: { oldSigner: beet.COption<web3.PublicKey> }
  ChangeThreshold: void /* scalar variant */
  ChangeTimeLock: { newTimeLock: beet.COption<number> }
}

/**
 * Union type respresenting the AllowedSettingsChange data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isAllowedSettingsChange*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type AllowedSettingsChange =
  beet.DataEnumKeyAsKind<AllowedSettingsChangeRecord>

export const isAllowedSettingsChangeAddSigner = (
  x: AllowedSettingsChange
): x is AllowedSettingsChange & { __kind: 'AddSigner' } =>
  x.__kind === 'AddSigner'
export const isAllowedSettingsChangeRemoveSigner = (
  x: AllowedSettingsChange
): x is AllowedSettingsChange & { __kind: 'RemoveSigner' } =>
  x.__kind === 'RemoveSigner'
export const isAllowedSettingsChangeChangeThreshold = (
  x: AllowedSettingsChange
): x is AllowedSettingsChange & { __kind: 'ChangeThreshold' } =>
  x.__kind === 'ChangeThreshold'
export const isAllowedSettingsChangeChangeTimeLock = (
  x: AllowedSettingsChange
): x is AllowedSettingsChange & { __kind: 'ChangeTimeLock' } =>
  x.__kind === 'ChangeTimeLock'

/**
 * @category userTypes
 * @category generated
 */
export const allowedSettingsChangeBeet =
  beet.dataEnum<AllowedSettingsChangeRecord>([
    [
      'AddSigner',
      new beet.FixableBeetArgsStruct<AllowedSettingsChangeRecord['AddSigner']>(
        [
          ['newSigner', beet.coption(beetSolana.publicKey)],
          ['newSignerPermissions', beet.coption(permissionsBeet)],
        ],
        'AllowedSettingsChangeRecord["AddSigner"]'
      ),
    ],

    [
      'RemoveSigner',
      new beet.FixableBeetArgsStruct<
        AllowedSettingsChangeRecord['RemoveSigner']
      >(
        [['oldSigner', beet.coption(beetSolana.publicKey)]],
        'AllowedSettingsChangeRecord["RemoveSigner"]'
      ),
    ],
    ['ChangeThreshold', beet.unit],

    [
      'ChangeTimeLock',
      new beet.FixableBeetArgsStruct<
        AllowedSettingsChangeRecord['ChangeTimeLock']
      >(
        [['newTimeLock', beet.coption(beet.u32)]],
        'AllowedSettingsChangeRecord["ChangeTimeLock"]'
      ),
    ],
  ]) as beet.FixableBeet<AllowedSettingsChange, AllowedSettingsChange>
