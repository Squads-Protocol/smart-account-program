/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
/**
 * This type is used to derive the {@link PolicyExpiration} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link PolicyExpiration} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type PolicyExpirationRecord = {
  Timestamp: { fields: [beet.bignum] }
  SettingsState: { fields: [number[] /* size: 32 */] }
}

/**
 * Union type respresenting the PolicyExpiration data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isPolicyExpiration*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type PolicyExpiration = beet.DataEnumKeyAsKind<PolicyExpirationRecord>

export const isPolicyExpirationTimestamp = (
  x: PolicyExpiration
): x is PolicyExpiration & { __kind: 'Timestamp' } => x.__kind === 'Timestamp'
export const isPolicyExpirationSettingsState = (
  x: PolicyExpiration
): x is PolicyExpiration & { __kind: 'SettingsState' } =>
  x.__kind === 'SettingsState'

/**
 * @category userTypes
 * @category generated
 */
export const policyExpirationBeet = beet.dataEnum<PolicyExpirationRecord>([
  [
    'Timestamp',
    new beet.BeetArgsStruct<PolicyExpirationRecord['Timestamp']>(
      [['fields', beet.fixedSizeTuple([beet.i64])]],
      'PolicyExpirationRecord["Timestamp"]'
    ),
  ],
  [
    'SettingsState',
    new beet.BeetArgsStruct<PolicyExpirationRecord['SettingsState']>(
      [
        [
          'fields',
          beet.fixedSizeTuple([beet.uniformFixedSizeArray(beet.u8, 32)]),
        ],
      ],
      'PolicyExpirationRecord["SettingsState"]'
    ),
  ],
]) as beet.FixableBeet<PolicyExpiration, PolicyExpiration>
