/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import {
  InternalFundTransferPolicy,
  internalFundTransferPolicyBeet,
} from './InternalFundTransferPolicy'
import {
  SpendingLimitPolicy,
  spendingLimitPolicyBeet,
} from './SpendingLimitPolicy'
import {
  SettingsChangePolicy,
  settingsChangePolicyBeet,
} from './SettingsChangePolicy'
import {
  ProgramInteractionPolicy,
  programInteractionPolicyBeet,
} from './ProgramInteractionPolicy'
/**
 * This type is used to derive the {@link PolicyState} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link PolicyState} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type PolicyStateRecord = {
  InternalFundTransfer: { fields: [InternalFundTransferPolicy] }
  SpendingLimit: { fields: [SpendingLimitPolicy] }
  SettingsChange: { fields: [SettingsChangePolicy] }
  ProgramInteraction: { fields: [ProgramInteractionPolicy] }
}

/**
 * Union type respresenting the PolicyState data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isPolicyState*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type PolicyState = beet.DataEnumKeyAsKind<PolicyStateRecord>

export const isPolicyStateInternalFundTransfer = (
  x: PolicyState
): x is PolicyState & { __kind: 'InternalFundTransfer' } =>
  x.__kind === 'InternalFundTransfer'
export const isPolicyStateSpendingLimit = (
  x: PolicyState
): x is PolicyState & { __kind: 'SpendingLimit' } =>
  x.__kind === 'SpendingLimit'
export const isPolicyStateSettingsChange = (
  x: PolicyState
): x is PolicyState & { __kind: 'SettingsChange' } =>
  x.__kind === 'SettingsChange'
export const isPolicyStateProgramInteraction = (
  x: PolicyState
): x is PolicyState & { __kind: 'ProgramInteraction' } =>
  x.__kind === 'ProgramInteraction'

/**
 * @category userTypes
 * @category generated
 */
export const policyStateBeet = beet.dataEnum<PolicyStateRecord>([
  [
    'InternalFundTransfer',
    new beet.FixableBeetArgsStruct<PolicyStateRecord['InternalFundTransfer']>(
      [['fields', beet.tuple([internalFundTransferPolicyBeet])]],
      'PolicyStateRecord["InternalFundTransfer"]'
    ),
  ],
  [
    'SpendingLimit',
    new beet.FixableBeetArgsStruct<PolicyStateRecord['SpendingLimit']>(
      [['fields', beet.tuple([spendingLimitPolicyBeet])]],
      'PolicyStateRecord["SpendingLimit"]'
    ),
  ],
  [
    'SettingsChange',
    new beet.FixableBeetArgsStruct<PolicyStateRecord['SettingsChange']>(
      [['fields', beet.tuple([settingsChangePolicyBeet])]],
      'PolicyStateRecord["SettingsChange"]'
    ),
  ],
  [
    'ProgramInteraction',
    new beet.FixableBeetArgsStruct<PolicyStateRecord['ProgramInteraction']>(
      [['fields', beet.tuple([programInteractionPolicyBeet])]],
      'PolicyStateRecord["ProgramInteraction"]'
    ),
  ],
]) as beet.FixableBeet<PolicyState, PolicyState>
