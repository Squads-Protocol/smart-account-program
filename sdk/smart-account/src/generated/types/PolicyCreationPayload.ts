/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import {
  InternalFundTransferPolicyCreationPayload,
  internalFundTransferPolicyCreationPayloadBeet,
} from './InternalFundTransferPolicyCreationPayload'
import {
  SpendingLimitPolicyCreationPayload,
  spendingLimitPolicyCreationPayloadBeet,
} from './SpendingLimitPolicyCreationPayload'
import {
  SettingsChangePolicyCreationPayload,
  settingsChangePolicyCreationPayloadBeet,
} from './SettingsChangePolicyCreationPayload'
import {
  ProgramInteractionPolicyCreationPayload,
  programInteractionPolicyCreationPayloadBeet,
} from './ProgramInteractionPolicyCreationPayload'
/**
 * This type is used to derive the {@link PolicyCreationPayload} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link PolicyCreationPayload} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type PolicyCreationPayloadRecord = {
  InternalFundTransfer: { fields: [InternalFundTransferPolicyCreationPayload] }
  SpendingLimit: { fields: [SpendingLimitPolicyCreationPayload] }
  SettingsChange: { fields: [SettingsChangePolicyCreationPayload] }
  ProgramInteraction: { fields: [ProgramInteractionPolicyCreationPayload] }
}

/**
 * Union type respresenting the PolicyCreationPayload data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isPolicyCreationPayload*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type PolicyCreationPayload =
  beet.DataEnumKeyAsKind<PolicyCreationPayloadRecord>

export const isPolicyCreationPayloadInternalFundTransfer = (
  x: PolicyCreationPayload
): x is PolicyCreationPayload & { __kind: 'InternalFundTransfer' } =>
  x.__kind === 'InternalFundTransfer'
export const isPolicyCreationPayloadSpendingLimit = (
  x: PolicyCreationPayload
): x is PolicyCreationPayload & { __kind: 'SpendingLimit' } =>
  x.__kind === 'SpendingLimit'
export const isPolicyCreationPayloadSettingsChange = (
  x: PolicyCreationPayload
): x is PolicyCreationPayload & { __kind: 'SettingsChange' } =>
  x.__kind === 'SettingsChange'
export const isPolicyCreationPayloadProgramInteraction = (
  x: PolicyCreationPayload
): x is PolicyCreationPayload & { __kind: 'ProgramInteraction' } =>
  x.__kind === 'ProgramInteraction'

/**
 * @category userTypes
 * @category generated
 */
export const policyCreationPayloadBeet =
  beet.dataEnum<PolicyCreationPayloadRecord>([
    [
      'InternalFundTransfer',
      new beet.FixableBeetArgsStruct<
        PolicyCreationPayloadRecord['InternalFundTransfer']
      >(
        [
          [
            'fields',
            beet.tuple([internalFundTransferPolicyCreationPayloadBeet]),
          ],
        ],
        'PolicyCreationPayloadRecord["InternalFundTransfer"]'
      ),
    ],
    [
      'SpendingLimit',
      new beet.FixableBeetArgsStruct<
        PolicyCreationPayloadRecord['SpendingLimit']
      >(
        [['fields', beet.tuple([spendingLimitPolicyCreationPayloadBeet])]],
        'PolicyCreationPayloadRecord["SpendingLimit"]'
      ),
    ],
    [
      'SettingsChange',
      new beet.FixableBeetArgsStruct<
        PolicyCreationPayloadRecord['SettingsChange']
      >(
        [['fields', beet.tuple([settingsChangePolicyCreationPayloadBeet])]],
        'PolicyCreationPayloadRecord["SettingsChange"]'
      ),
    ],
    [
      'ProgramInteraction',
      new beet.FixableBeetArgsStruct<
        PolicyCreationPayloadRecord['ProgramInteraction']
      >(
        [['fields', beet.tuple([programInteractionPolicyCreationPayloadBeet])]],
        'PolicyCreationPayloadRecord["ProgramInteraction"]'
      ),
    ],
  ]) as beet.FixableBeet<PolicyCreationPayload, PolicyCreationPayload>
