/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
/**
 * This type is used to derive the {@link PolicyExpirationArgs} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link PolicyExpirationArgs} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type PolicyExpirationArgsRecord = {
  Timestamp: { fields: [beet.bignum] }
  SettingsState: void /* scalar variant */
}

/**
 * Union type respresenting the PolicyExpirationArgs data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isPolicyExpirationArgs*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type PolicyExpirationArgs =
  beet.DataEnumKeyAsKind<PolicyExpirationArgsRecord>

export const isPolicyExpirationArgsTimestamp = (
  x: PolicyExpirationArgs
): x is PolicyExpirationArgs & { __kind: 'Timestamp' } =>
  x.__kind === 'Timestamp'
export const isPolicyExpirationArgsSettingsState = (
  x: PolicyExpirationArgs
): x is PolicyExpirationArgs & { __kind: 'SettingsState' } =>
  x.__kind === 'SettingsState'

/**
 * @category userTypes
 * @category generated
 */
export const policyExpirationArgsBeet =
  beet.dataEnum<PolicyExpirationArgsRecord>([
    [
      'Timestamp',
      new beet.BeetArgsStruct<PolicyExpirationArgsRecord['Timestamp']>(
        [['fields', beet.fixedSizeTuple([beet.i64])]],
        'PolicyExpirationArgsRecord["Timestamp"]'
      ),
    ],
    ['SettingsState', beet.unit],
  ]) as beet.FixableBeet<PolicyExpirationArgs, PolicyExpirationArgs>
