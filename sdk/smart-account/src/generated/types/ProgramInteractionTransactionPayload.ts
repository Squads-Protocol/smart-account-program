/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import {
  TransactionPayload,
  transactionPayloadBeet,
} from './TransactionPayload'
import {
  SyncTransactionPayloadDetails,
  syncTransactionPayloadDetailsBeet,
} from './SyncTransactionPayloadDetails'
/**
 * This type is used to derive the {@link ProgramInteractionTransactionPayload} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link ProgramInteractionTransactionPayload} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type ProgramInteractionTransactionPayloadRecord = {
  AsyncTransaction: { fields: [TransactionPayload] }
  SyncTransaction: { fields: [SyncTransactionPayloadDetails] }
}

/**
 * Union type respresenting the ProgramInteractionTransactionPayload data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isProgramInteractionTransactionPayload*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type ProgramInteractionTransactionPayload =
  beet.DataEnumKeyAsKind<ProgramInteractionTransactionPayloadRecord>

export const isProgramInteractionTransactionPayloadAsyncTransaction = (
  x: ProgramInteractionTransactionPayload
): x is ProgramInteractionTransactionPayload & { __kind: 'AsyncTransaction' } =>
  x.__kind === 'AsyncTransaction'
export const isProgramInteractionTransactionPayloadSyncTransaction = (
  x: ProgramInteractionTransactionPayload
): x is ProgramInteractionTransactionPayload & { __kind: 'SyncTransaction' } =>
  x.__kind === 'SyncTransaction'

/**
 * @category userTypes
 * @category generated
 */
export const programInteractionTransactionPayloadBeet =
  beet.dataEnum<ProgramInteractionTransactionPayloadRecord>([
    [
      'AsyncTransaction',
      new beet.FixableBeetArgsStruct<
        ProgramInteractionTransactionPayloadRecord['AsyncTransaction']
      >(
        [['fields', beet.tuple([transactionPayloadBeet])]],
        'ProgramInteractionTransactionPayloadRecord["AsyncTransaction"]'
      ),
    ],
    [
      'SyncTransaction',
      new beet.FixableBeetArgsStruct<
        ProgramInteractionTransactionPayloadRecord['SyncTransaction']
      >(
        [['fields', beet.tuple([syncTransactionPayloadDetailsBeet])]],
        'ProgramInteractionTransactionPayloadRecord["SyncTransaction"]'
      ),
    ],
  ]) as beet.FixableBeet<
    ProgramInteractionTransactionPayload,
    ProgramInteractionTransactionPayload
  >
