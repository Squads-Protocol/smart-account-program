/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import {
  TransactionPayload,
  transactionPayloadBeet,
} from './TransactionPayload'
import { PolicyPayload, policyPayloadBeet } from './PolicyPayload'
/**
 * This type is used to derive the {@link CreateTransactionArgs} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link CreateTransactionArgs} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type CreateTransactionArgsRecord = {
  TransactionPayload: { fields: [TransactionPayload] }
  PolicyPayload: { payload: PolicyPayload }
}

/**
 * Union type respresenting the CreateTransactionArgs data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isCreateTransactionArgs*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type CreateTransactionArgs =
  beet.DataEnumKeyAsKind<CreateTransactionArgsRecord>

export const isCreateTransactionArgsTransactionPayload = (
  x: CreateTransactionArgs
): x is CreateTransactionArgs & { __kind: 'TransactionPayload' } =>
  x.__kind === 'TransactionPayload'
export const isCreateTransactionArgsPolicyPayload = (
  x: CreateTransactionArgs
): x is CreateTransactionArgs & { __kind: 'PolicyPayload' } =>
  x.__kind === 'PolicyPayload'

/**
 * @category userTypes
 * @category generated
 */
export const createTransactionArgsBeet =
  beet.dataEnum<CreateTransactionArgsRecord>([
    [
      'TransactionPayload',
      new beet.FixableBeetArgsStruct<
        CreateTransactionArgsRecord['TransactionPayload']
      >(
        [['fields', beet.tuple([transactionPayloadBeet])]],
        'CreateTransactionArgsRecord["TransactionPayload"]'
      ),
    ],

    [
      'PolicyPayload',
      new beet.FixableBeetArgsStruct<
        CreateTransactionArgsRecord['PolicyPayload']
      >(
        [['payload', policyPayloadBeet]],
        'CreateTransactionArgsRecord["PolicyPayload"]'
      ),
    ],
  ]) as beet.FixableBeet<CreateTransactionArgs, CreateTransactionArgs>
