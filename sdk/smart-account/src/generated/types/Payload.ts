/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import {
  TransactionPayloadDetails,
  transactionPayloadDetailsBeet,
} from './TransactionPayloadDetails'
import {
  PolicyActionPayloadDetails,
  policyActionPayloadDetailsBeet,
} from './PolicyActionPayloadDetails'
/**
 * This type is used to derive the {@link Payload} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link Payload} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type PayloadRecord = {
  TransactionPayload: { fields: [TransactionPayloadDetails] }
  PolicyPayload: { fields: [PolicyActionPayloadDetails] }
}

/**
 * Union type respresenting the Payload data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isPayload*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type Payload = beet.DataEnumKeyAsKind<PayloadRecord>

export const isPayloadTransactionPayload = (
  x: Payload
): x is Payload & { __kind: 'TransactionPayload' } =>
  x.__kind === 'TransactionPayload'
export const isPayloadPolicyPayload = (
  x: Payload
): x is Payload & { __kind: 'PolicyPayload' } => x.__kind === 'PolicyPayload'

/**
 * @category userTypes
 * @category generated
 */
export const payloadBeet = beet.dataEnum<PayloadRecord>([
  [
    'TransactionPayload',
    new beet.FixableBeetArgsStruct<PayloadRecord['TransactionPayload']>(
      [['fields', beet.tuple([transactionPayloadDetailsBeet])]],
      'PayloadRecord["TransactionPayload"]'
    ),
  ],
  [
    'PolicyPayload',
    new beet.FixableBeetArgsStruct<PayloadRecord['PolicyPayload']>(
      [['fields', beet.tuple([policyActionPayloadDetailsBeet])]],
      'PayloadRecord["PolicyPayload"]'
    ),
  ],
]) as beet.FixableBeet<Payload, Payload>
