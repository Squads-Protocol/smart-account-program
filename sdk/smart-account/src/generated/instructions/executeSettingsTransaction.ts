/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category ExecuteSettingsTransaction
 * @category generated
 */
export const executeSettingsTransactionStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'ExecuteSettingsTransactionInstructionArgs'
)
/**
 * Accounts required by the _executeSettingsTransaction_ instruction
 *
 * @property [_writable_] settings
 * @property [**signer**] signer
 * @property [_writable_] proposal
 * @property [] transaction
 * @property [_writable_, **signer**] rentPayer (optional)
 * @property [] program
 * @category Instructions
 * @category ExecuteSettingsTransaction
 * @category generated
 */
export type ExecuteSettingsTransactionInstructionAccounts = {
  settings: web3.PublicKey
  signer: web3.PublicKey
  proposal: web3.PublicKey
  transaction: web3.PublicKey
  rentPayer?: web3.PublicKey
  systemProgram?: web3.PublicKey
  program: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const executeSettingsTransactionInstructionDiscriminator = [
  131, 210, 27, 88, 27, 204, 143, 189,
]

/**
 * Creates a _ExecuteSettingsTransaction_ instruction.
 *
 * Optional accounts that are not provided default to the program ID since
 * this was indicated in the IDL from which this instruction was generated.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category ExecuteSettingsTransaction
 * @category generated
 */
export function createExecuteSettingsTransactionInstruction(
  accounts: ExecuteSettingsTransactionInstructionAccounts,
  programId = new web3.PublicKey('SMRTzfY6DfH5ik3TKiyLFfXexV8uSG3d2UksSCYdunG')
) {
  const [data] = executeSettingsTransactionStruct.serialize({
    instructionDiscriminator:
      executeSettingsTransactionInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.settings,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.signer,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.proposal,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.transaction,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rentPayer ?? programId,
      isWritable: accounts.rentPayer != null,
      isSigner: accounts.rentPayer != null,
    },
    {
      pubkey: accounts.systemProgram ?? programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.program,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
