/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  SyncTransactionArgs,
  syncTransactionArgsBeet,
} from '../types/SyncTransactionArgs'

/**
 * @category Instructions
 * @category ExecuteTransactionSyncV2
 * @category generated
 */
export type ExecuteTransactionSyncV2InstructionArgs = {
  args: SyncTransactionArgs
}
/**
 * @category Instructions
 * @category ExecuteTransactionSyncV2
 * @category generated
 */
export const executeTransactionSyncV2Struct = new beet.FixableBeetArgsStruct<
  ExecuteTransactionSyncV2InstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', syncTransactionArgsBeet],
  ],
  'ExecuteTransactionSyncV2InstructionArgs'
)
/**
 * Accounts required by the _executeTransactionSyncV2_ instruction
 *
 * @property [_writable_] consensusAccount
 * @property [] program
 * @category Instructions
 * @category ExecuteTransactionSyncV2
 * @category generated
 */
export type ExecuteTransactionSyncV2InstructionAccounts = {
  consensusAccount: web3.PublicKey
  program: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const executeTransactionSyncV2InstructionDiscriminator = [
  90, 81, 187, 81, 39, 70, 128, 78,
]

/**
 * Creates a _ExecuteTransactionSyncV2_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ExecuteTransactionSyncV2
 * @category generated
 */
export function createExecuteTransactionSyncV2Instruction(
  accounts: ExecuteTransactionSyncV2InstructionAccounts,
  args: ExecuteTransactionSyncV2InstructionArgs,
  programId = new web3.PublicKey('SMRTzfY6DfH5ik3TKiyLFfXexV8uSG3d2UksSCYdunG')
) {
  const [data] = executeTransactionSyncV2Struct.serialize({
    instructionDiscriminator: executeTransactionSyncV2InstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.consensusAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.program,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
