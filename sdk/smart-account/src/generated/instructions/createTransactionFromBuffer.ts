/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  CreateTransactionArgs,
  createTransactionArgsBeet,
} from '../types/CreateTransactionArgs'

/**
 * @category Instructions
 * @category CreateTransactionFromBuffer
 * @category generated
 */
export type CreateTransactionFromBufferInstructionArgs = {
  args: CreateTransactionArgs
}
/**
 * @category Instructions
 * @category CreateTransactionFromBuffer
 * @category generated
 */
export const createTransactionFromBufferStruct = new beet.FixableBeetArgsStruct<
  CreateTransactionFromBufferInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', createTransactionArgsBeet],
  ],
  'CreateTransactionFromBufferInstructionArgs'
)
/**
 * Accounts required by the _createTransactionFromBuffer_ instruction
 *
 * @property [_writable_] transactionCreateItemConsensusAccount
 * @property [_writable_] transactionCreateItemTransaction
 * @property [**signer**] transactionCreateItemCreator
 * @property [_writable_, **signer**] transactionCreateItemRentPayer
 * @property [] transactionCreateItemSystemProgram
 * @property [] transactionCreateItemProgram
 * @property [_writable_] transactionBuffer
 * @property [_writable_, **signer**] creator
 * @category Instructions
 * @category CreateTransactionFromBuffer
 * @category generated
 */
export type CreateTransactionFromBufferInstructionAccounts = {
  transactionCreateItemConsensusAccount: web3.PublicKey
  transactionCreateItemTransaction: web3.PublicKey
  transactionCreateItemCreator: web3.PublicKey
  transactionCreateItemRentPayer: web3.PublicKey
  transactionCreateItemSystemProgram: web3.PublicKey
  transactionCreateItemProgram: web3.PublicKey
  transactionBuffer: web3.PublicKey
  creator: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createTransactionFromBufferInstructionDiscriminator = [
  53, 192, 39, 239, 124, 84, 43, 249,
]

/**
 * Creates a _CreateTransactionFromBuffer_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateTransactionFromBuffer
 * @category generated
 */
export function createCreateTransactionFromBufferInstruction(
  accounts: CreateTransactionFromBufferInstructionAccounts,
  args: CreateTransactionFromBufferInstructionArgs,
  programId = new web3.PublicKey('SMRTzfY6DfH5ik3TKiyLFfXexV8uSG3d2UksSCYdunG')
) {
  const [data] = createTransactionFromBufferStruct.serialize({
    instructionDiscriminator:
      createTransactionFromBufferInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.transactionCreateItemConsensusAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.transactionCreateItemTransaction,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.transactionCreateItemCreator,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.transactionCreateItemRentPayer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.transactionCreateItemSystemProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.transactionCreateItemProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.transactionBuffer,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.creator,
      isWritable: true,
      isSigner: true,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
