/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import {
  SmartAccountSigner,
  smartAccountSignerBeet,
} from '../types/SmartAccountSigner'

/**
 * Arguments used to create {@link Settings}
 * @category Accounts
 * @category generated
 */
export type SettingsArgs = {
  seed: beet.bignum
  settingsAuthority: web3.PublicKey
  threshold: number
  timeLock: number
  transactionIndex: beet.bignum
  staleTransactionIndex: beet.bignum
  archivalAuthority: beet.COption<web3.PublicKey>
  archivableAfter: beet.bignum
  bump: number
  signers: SmartAccountSigner[]
  accountUtilization: number
  reserved1: number
  reserved2: number
}

export const settingsDiscriminator = [223, 179, 163, 190, 177, 224, 67, 173]
/**
 * Holds the data for the {@link Settings} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Settings implements SettingsArgs {
  private constructor(
    readonly seed: beet.bignum,
    readonly settingsAuthority: web3.PublicKey,
    readonly threshold: number,
    readonly timeLock: number,
    readonly transactionIndex: beet.bignum,
    readonly staleTransactionIndex: beet.bignum,
    readonly archivalAuthority: beet.COption<web3.PublicKey>,
    readonly archivableAfter: beet.bignum,
    readonly bump: number,
    readonly signers: SmartAccountSigner[],
    readonly accountUtilization: number,
    readonly reserved1: number,
    readonly reserved2: number
  ) {}

  /**
   * Creates a {@link Settings} instance from the provided args.
   */
  static fromArgs(args: SettingsArgs) {
    return new Settings(
      args.seed,
      args.settingsAuthority,
      args.threshold,
      args.timeLock,
      args.transactionIndex,
      args.staleTransactionIndex,
      args.archivalAuthority,
      args.archivableAfter,
      args.bump,
      args.signers,
      args.accountUtilization,
      args.reserved1,
      args.reserved2
    )
  }

  /**
   * Deserializes the {@link Settings} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Settings, number] {
    return Settings.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Settings} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<Settings> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find Settings account at ${address}`)
    }
    return Settings.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'SMRTe6bnZAgJmXt9aJin7XgAzDn1XMHGNy95QATyzpk'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, settingsBeet)
  }

  /**
   * Deserializes the {@link Settings} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Settings, number] {
    return settingsBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link Settings} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return settingsBeet.serialize({
      accountDiscriminator: settingsDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Settings} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: SettingsArgs) {
    const instance = Settings.fromArgs(args)
    return settingsBeet.toFixedFromValue({
      accountDiscriminator: settingsDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Settings} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: SettingsArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Settings.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link Settings} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      seed: (() => {
        const x = <{ toNumber: () => number }>this.seed
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      settingsAuthority: this.settingsAuthority.toBase58(),
      threshold: this.threshold,
      timeLock: this.timeLock,
      transactionIndex: (() => {
        const x = <{ toNumber: () => number }>this.transactionIndex
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      staleTransactionIndex: (() => {
        const x = <{ toNumber: () => number }>this.staleTransactionIndex
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      archivalAuthority: this.archivalAuthority,
      archivableAfter: (() => {
        const x = <{ toNumber: () => number }>this.archivableAfter
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      bump: this.bump,
      signers: this.signers,
      accountUtilization: this.accountUtilization,
      reserved1: this.reserved1,
      reserved2: this.reserved2,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const settingsBeet = new beet.FixableBeetStruct<
  Settings,
  SettingsArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['seed', beet.u128],
    ['settingsAuthority', beetSolana.publicKey],
    ['threshold', beet.u16],
    ['timeLock', beet.u32],
    ['transactionIndex', beet.u64],
    ['staleTransactionIndex', beet.u64],
    ['archivalAuthority', beet.coption(beetSolana.publicKey)],
    ['archivableAfter', beet.u64],
    ['bump', beet.u8],
    ['signers', beet.array(smartAccountSignerBeet)],
    ['accountUtilization', beet.u8],
    ['reserved1', beet.u8],
    ['reserved2', beet.u8],
  ],
  Settings.fromArgs,
  'Settings'
)
