/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  RemoveSpendingLimitArgs,
  removeSpendingLimitArgsBeet,
} from '../types/RemoveSpendingLimitArgs'

/**
 * @category Instructions
 * @category RemoveSpendingLimitAsAuthority
 * @category generated
 */
export type RemoveSpendingLimitAsAuthorityInstructionArgs = {
  args: RemoveSpendingLimitArgs
}
/**
 * @category Instructions
 * @category RemoveSpendingLimitAsAuthority
 * @category generated
 */
export const removeSpendingLimitAsAuthorityStruct =
  new beet.FixableBeetArgsStruct<
    RemoveSpendingLimitAsAuthorityInstructionArgs & {
      instructionDiscriminator: number[] /* size: 8 */
    }
  >(
    [
      ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
      ['args', removeSpendingLimitArgsBeet],
    ],
    'RemoveSpendingLimitAsAuthorityInstructionArgs'
  )
/**
 * Accounts required by the _removeSpendingLimitAsAuthority_ instruction
 *
 * @property [] settings
 * @property [**signer**] settingsAuthority
 * @property [_writable_] spendingLimit
 * @property [_writable_] rentCollector
 * @property [] program
 * @category Instructions
 * @category RemoveSpendingLimitAsAuthority
 * @category generated
 */
export type RemoveSpendingLimitAsAuthorityInstructionAccounts = {
  settings: web3.PublicKey
  settingsAuthority: web3.PublicKey
  spendingLimit: web3.PublicKey
  rentCollector: web3.PublicKey
  program: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const removeSpendingLimitAsAuthorityInstructionDiscriminator = [
  94, 32, 68, 127, 251, 44, 145, 7,
]

/**
 * Creates a _RemoveSpendingLimitAsAuthority_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category RemoveSpendingLimitAsAuthority
 * @category generated
 */
export function createRemoveSpendingLimitAsAuthorityInstruction(
  accounts: RemoveSpendingLimitAsAuthorityInstructionAccounts,
  args: RemoveSpendingLimitAsAuthorityInstructionArgs,
  programId = new web3.PublicKey('SMRTe6bnZAgJmXt9aJin7XgAzDn1XMHGNy95QATyzpk')
) {
  const [data] = removeSpendingLimitAsAuthorityStruct.serialize({
    instructionDiscriminator:
      removeSpendingLimitAsAuthorityInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.settings,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.settingsAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.spendingLimit,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.rentCollector,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.program,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
