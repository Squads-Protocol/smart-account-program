/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  UseSpendingLimitArgs,
  useSpendingLimitArgsBeet,
} from '../types/UseSpendingLimitArgs'

/**
 * @category Instructions
 * @category UseSpendingLimit
 * @category generated
 */
export type UseSpendingLimitInstructionArgs = {
  args: UseSpendingLimitArgs
}
/**
 * @category Instructions
 * @category UseSpendingLimit
 * @category generated
 */
export const useSpendingLimitStruct = new beet.FixableBeetArgsStruct<
  UseSpendingLimitInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', useSpendingLimitArgsBeet],
  ],
  'UseSpendingLimitInstructionArgs'
)
/**
 * Accounts required by the _useSpendingLimit_ instruction
 *
 * @property [] settings
 * @property [**signer**] signer
 * @property [_writable_] spendingLimit
 * @property [_writable_] smartAccount
 * @property [_writable_] destination
 * @property [] mint (optional)
 * @property [_writable_] smartAccountTokenAccount (optional)
 * @property [_writable_] destinationTokenAccount (optional)
 * @property [] program
 * @category Instructions
 * @category UseSpendingLimit
 * @category generated
 */
export type UseSpendingLimitInstructionAccounts = {
  settings: web3.PublicKey
  signer: web3.PublicKey
  spendingLimit: web3.PublicKey
  smartAccount: web3.PublicKey
  destination: web3.PublicKey
  systemProgram?: web3.PublicKey
  mint?: web3.PublicKey
  smartAccountTokenAccount?: web3.PublicKey
  destinationTokenAccount?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  program: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const useSpendingLimitInstructionDiscriminator = [
  41, 179, 70, 5, 194, 147, 239, 158,
]

/**
 * Creates a _UseSpendingLimit_ instruction.
 *
 * Optional accounts that are not provided default to the program ID since
 * this was indicated in the IDL from which this instruction was generated.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UseSpendingLimit
 * @category generated
 */
export function createUseSpendingLimitInstruction(
  accounts: UseSpendingLimitInstructionAccounts,
  args: UseSpendingLimitInstructionArgs,
  programId = new web3.PublicKey('SMRTe6bnZAgJmXt9aJin7XgAzDn1XMHGNy95QATyzpk')
) {
  const [data] = useSpendingLimitStruct.serialize({
    instructionDiscriminator: useSpendingLimitInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.settings,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.signer,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.spendingLimit,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.smartAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.destination,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.mint ?? programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.smartAccountTokenAccount ?? programId,
      isWritable: accounts.smartAccountTokenAccount != null,
      isSigner: false,
    },
    {
      pubkey: accounts.destinationTokenAccount ?? programId,
      isWritable: accounts.destinationTokenAccount != null,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.program,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
